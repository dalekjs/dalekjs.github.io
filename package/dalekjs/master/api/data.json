{
    "project": {
        "name": "dalekjs",
        "description": "A node based cross browser testing tool",
        "version": "0.0.9",
        "url": ""
    },
    "files": {
        "lib/dalek/actions.js": {
            "name": "lib/dalek/actions.js",
            "modules": {},
            "classes": {
                "Actions": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/dalek/assertions.js": {
            "name": "lib/dalek/assertions.js",
            "modules": {
                "Assertions": 1
            },
            "classes": {
                "Dalek.Internal.Assertions": 1
            },
            "fors": {},
            "namespaces": {
                "Dalek.Internal": 1
            }
        },
        "lib/dalek/config.js": {
            "name": "lib/dalek/config.js",
            "modules": {},
            "classes": {
                "Dalek.Config": 1
            },
            "fors": {},
            "namespaces": {
                "Dalek": 1
            }
        },
        "lib/dalek/driver.js": {
            "name": "lib/dalek/driver.js",
            "modules": {},
            "classes": {
                "Dalek.Driver": 1
            },
            "fors": {},
            "namespaces": {
                "Dalek": 1
            }
        },
        "lib/dalek/host.js": {
            "name": "lib/dalek/host.js",
            "modules": {
                "Dalek": 1
            },
            "classes": {
                "Host": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/dalek/remote.js": {
            "name": "lib/dalek/remote.js",
            "modules": {
                "Remote": 1
            },
            "classes": {
                "Dalek.Remote": 1
            },
            "fors": {},
            "namespaces": {
                "Dalek": 1
            }
        },
        "lib/dalek/reporter.js": {
            "name": "lib/dalek/reporter.js",
            "modules": {
                "DalekJS": 1
            },
            "classes": {
                "Dalek.Reporter": 1
            },
            "fors": {},
            "namespaces": {
                "Dalek": 1
            }
        },
        "lib/dalek/suite.js": {
            "name": "lib/dalek/suite.js",
            "modules": {},
            "classes": {
                "Dalek.Suite": 1
            },
            "fors": {},
            "namespaces": {
                "Dalek": 1
            }
        },
        "lib/dalek/timer.js": {
            "name": "lib/dalek/timer.js",
            "modules": {},
            "classes": {
                "Dalek.Timer": 1
            },
            "fors": {},
            "namespaces": {
                "Dalek": 1
            }
        },
        "lib/dalek/unit.js": {
            "name": "lib/dalek/unit.js",
            "modules": {},
            "classes": {
                "Dalek.Unit": 1
            },
            "fors": {},
            "namespaces": {
                "Dalek": 1
            }
        },
        "lib/dalek.js": {
            "name": "lib/dalek.js",
            "modules": {},
            "classes": {
                "Dalek": 1
            },
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {
        "DalekJS": {
            "name": "DalekJS",
            "submodules": {},
            "classes": {
                "Actions": 1,
                "Dalek.Config": 1,
                "Dalek.Driver": 1,
                "Dalek.Reporter": 1,
                "Dalek.Suite": 1,
                "Dalek.Timer": 1,
                "Dalek.Unit": 1,
                "Dalek": 1
            },
            "fors": {},
            "namespaces": {
                "Dalek": 1
            },
            "tag": "module",
            "file": "lib/dalek.js",
            "line": 113,
            "description": "Checks & loads reporter modules",
            "part": "Config",
            "api": ""
        },
        "Assertions": {
            "name": "Assertions",
            "submodules": {},
            "classes": {
                "Dalek.Internal.Assertions": 1
            },
            "fors": {},
            "namespaces": {
                "Dalek.Internal": 1
            },
            "tag": "module",
            "file": "lib/dalek/assertions.js",
            "line": 43
        },
        "Dalek": {
            "name": "Dalek",
            "submodules": {},
            "classes": {
                "Host": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "lib/dalek/host.js",
            "line": 45,
            "description": "Remote Dalek host proxy",
            "part": "Remote",
            "api": ""
        },
        "Remote": {
            "name": "Remote",
            "submodules": {},
            "classes": {
                "Dalek.Remote": 1
            },
            "fors": {},
            "namespaces": {
                "Dalek": 1
            },
            "tag": "module",
            "file": "lib/dalek/remote.js",
            "line": 31,
            "description": "Mimics a real browser that runs in a remote dalek instance"
        }
    },
    "classes": {
        "Actions": {
            "name": "Actions",
            "shortname": "Actions",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "DalekJS",
            "file": "lib/dalek/actions.js",
            "line": 34,
            "description": "Actions are a way to control your browsers, e.g. simulate user interactions\nlike clicking elements, open urls, filling out input fields, etc.",
            "is_constructor": 1,
            "part": "Actions",
            "api": ""
        },
        "Dalek.Internal.Assertions": {
            "name": "Dalek.Internal.Assertions",
            "shortname": "Assertions",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Assertions",
            "namespace": "Dalek.Internal",
            "file": "lib/dalek/assertions.js",
            "line": 43,
            "description": "Assertions check if the assumptions you made about a website are correct.\nFor example they might check if the title of a page or the content text of\nan element is as expected, or if your mobile website version only displays\na certain amount of elements.",
            "is_constructor": 1,
            "part": "Assertions",
            "api": ""
        },
        "Dalek.Config": {
            "name": "Dalek.Config",
            "shortname": "Dalek.Config",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "DalekJS",
            "namespace": "Dalek",
            "file": "lib/dalek/config.js",
            "line": 52,
            "description": "Parses config data & loads config files for [DalekJS](//github.com/dalekjs/dalek) tests.\n\nThis module is a driver plugin for [DalekJS](//github.com/dalekjs/dalek).\nIt connects Daleks testsuite with the remote testing environment of [Sauce Labs](https://saucelabs.com).\n\nThe driver can be installed with the following command:\n\n```bash\n$ npm install dalek-driver-sauce --save-dev\n```\n\nYou can use the driver by adding a config option to the your [Dalekfile](/docs/config.html)\n\n```javascript\n\"driver\": [\"sauce\"]\n```\n\nOr you can tell Dalek that it should run your tests via sauces service via the command line:\n\n```bash\n$ dalek mytest.js -d sauce\n```\n\nIn order to run your tests within the Sauce Labs infrastructure, you must add your sauce username & key\nto your dalek configuration. Those two parameters must be set in order to get this driver up & running.\nYou can specifiy them within your [Dalekfile](/docs/config.html) like so:\n\n```javascript\n\"driver.sauce\": {\n  \"user\": \"dalekjs\",\n  \"key\": \"aaaaaa-1234-567a-1abc-1br6d9f68689\"\n}\n```\n\nIt is also possible to specify a set of other extra saucy parameters like `name` & `tags`:\n\n```javascript\n\"driver.sauce\": {\n  \"user\": \"dalekjs\",\n  \"key\": \"aaaaaa-1234-567a-1abc-1br6d9f68689\",\n  \"name\": \"Guineapig\",\n  \"tags\": [\"dalek\", \"testproject\"]\n}\n```\n\nIf you would like to have a more control over the browser/OS combinations that are available, you are able\nto configure you custom combinations:\n\n```javascript\n\"browsers\": [{\n  \"chrome\": {\n    \"platform\": \"OS X 10.6\",\n    \"actAs\": \"chrome\",\n    \"version\": 27\n  },\n  \"chromeWin\": {\n    \"platform\": \"Windows 7\",\n    \"actAs\": \"chrome\",\n    \"version\": 27\n  },\n  \"chromeLinux\": {\n    \"platform\": \"Linux\",\n    \"actAs\": \"chrome\",\n    \"version\": 26\n  }\n```\n\nYou can then call your custom browsers like so:\n\n```bash\n$ dalek mytest.js -d sauce -b chrome,chromeWin,chromeLinux\n```\n\nor you can define them in your Dalekfile:\n\n```javascript\n\"browser\": [\"chrome\", \"chromeWin\", \"chromeLinux\"]\n```\n\nA list of all available browser/OS combinations, can be found [here](https://saucelabs.com/docs/platforms)."
        },
        "Dalek.Driver": {
            "name": "Dalek.Driver",
            "shortname": "Dalek.Driver",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "DalekJS",
            "namespace": "Dalek",
            "file": "lib/dalek/driver.js",
            "line": 54,
            "description": "Generates & starts drivers & browsers\nthe tests will be run in"
        },
        "Host": {
            "name": "Host",
            "shortname": "Host",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Dalek",
            "namespace": "",
            "file": "lib/dalek/host.js",
            "line": 45,
            "description": "Remote Dalek host proxy"
        },
        "Dalek.Remote": {
            "name": "Dalek.Remote",
            "shortname": "Dalek.Remote",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Remote",
            "namespace": "Dalek",
            "file": "lib/dalek/remote.js",
            "line": 31,
            "description": "Mimics a real browser that runs in a remote dalek instance"
        },
        "Dalek.Reporter": {
            "name": "Dalek.Reporter",
            "shortname": "Dalek.Reporter",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "DalekJS",
            "namespace": "Dalek",
            "file": "lib/dalek/reporter.js",
            "line": 27,
            "description": "Checks & loads reporter modules"
        },
        "Dalek.Suite": {
            "name": "Dalek.Suite",
            "shortname": "Dalek.Suite",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "DalekJS",
            "namespace": "Dalek",
            "file": "lib/dalek/suite.js",
            "line": 47,
            "description": "Suite (Testsuite)"
        },
        "Dalek.Timer": {
            "name": "Dalek.Timer",
            "shortname": "Timer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "DalekJS",
            "namespace": "Dalek",
            "file": "lib/dalek/timer.js",
            "line": 39,
            "description": "Timing module to measure test run times",
            "is_constructor": 1
        },
        "Dalek.Unit": {
            "name": "Dalek.Unit",
            "shortname": "Dalek.Unit",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "DalekJS",
            "namespace": "Dalek",
            "file": "lib/dalek/unit.js",
            "line": 68,
            "description": "Generates an test instance"
        },
        "Dalek": {
            "name": "Dalek",
            "shortname": "Dalek",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "DalekJS",
            "namespace": "",
            "file": "lib/dalek.js",
            "line": 113,
            "description": "Daleks base module\nUsed to configure all the things\nand to start off the tests"
        }
    },
    "classitems": [
        {
            "file": "lib/dalek/actions.js",
            "line": 48,
            "description": "It can be really cumbersome to repeat selectors all over when performing\nmultiple actions or assertions on the same element(s).\nWhen you use the query method (or its alias $), you're able to specify a\nselector once instead of repeating it all over the place.\n\nSo, instead of writing this:\n\n```javascript\ntest.open('http://doctorwhotv.co.uk/')\n    .assert.text('#nav').is('Navigation')\n    .assert.visible('#nav')\n    .assert.attr('#nav', 'data-nav', 'true')\n    .click('#nav')\n    .done();\n```\n\nyou can write this:\n\n```javascript\ntest.open('http://doctorwhotv.co.uk/')\n    .query('#nav')\n      .assert.text().is('Navigation')\n      .assert.visible()\n      .assert.attr('data-nav', 'true')\n      .click()\n    .end()\n    .done();\n```\n\nAlways make sure to terminate it with the [end](assertions.html#meth-end) method!",
            "api": "",
            "itemtype": "method",
            "name": "query",
            "params": [
                {
                    "name": "selector",
                    "description": "Selector of the element to query",
                    "type": "String"
                }
            ],
            "chainable": 1,
            "class": "Actions"
        },
        {
            "file": "lib/dalek/actions.js",
            "line": 94,
            "description": "Alias of query",
            "api": "",
            "itemtype": "method",
            "name": "$",
            "params": [
                {
                    "name": "selector",
                    "description": "Selector of the element to query",
                    "type": "String"
                }
            ],
            "chainable": 1,
            "class": "Actions"
        },
        {
            "file": "lib/dalek/actions.js",
            "line": 105,
            "description": "Triggers a mouse event on the first element found matching the provided selector.\nSupported events are mouseup, mousedown, click, mousemove, mouseover and mouseout.\nTODO: IMPLEMENT",
            "itemtype": "method",
            "name": "mouseEvent",
            "params": [
                {
                    "name": "type",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "selector",
                    "description": "",
                    "type": "String"
                }
            ],
            "chainable": 1,
            "class": "Actions"
        },
        {
            "file": "lib/dalek/actions.js",
            "line": 123,
            "description": "Sets HTTP_AUTH_USER and HTTP_AUTH_PW values for HTTP based authentication systems.\n\nIf your site is behind a HTTP basic auth, you're able to set the username and the password\n\n```javascript\ntest.setHttpAuth('OSWIN', 'rycbrar')\n    .open('http://admin.therift.com');\n```\n\nMost of the time, you`re not storing your passwords within files that will be checked\nin your vcs, for this scenario, you have two options:\n\nThe first option is, to use daleks cli capabilities to generate config variables\nfrom the command line, like this\n\n```batch\n$ dalek --vars USER=OSWIN,PASS=rycbrar\n```\n\n```javascript\ntest.setHttpAuth(test.config.get('USER'), test.config.get('PASS'))\n    .open('http://admin.therift.com');\n```\n\nThe second option is, to use env variables to generate config variables\nfrom the command line, like this\n\n```batch\n$ SET USER=OSWIN\n$ SET PASS=rycbrar\n$ dalek\n```\n\n```javascript\ntest.setHttpAuth(test.config.get('USER'), test.config.get('PASS'))\n    .open('http://admin.therift.com');\n```\n\nIf both, dalek variables & env variables are set, the dalek variables win.\nFor more information about this, I recommend to check out the [configuration docs](/docs/config.html)\n\nTODO: IMPLEMENT",
            "itemtype": "method",
            "name": "setHttpAuth",
            "params": [
                {
                    "name": "username",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "password",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Actions"
            },
            "class": "Actions"
        },
        {
            "file": "lib/dalek/actions.js",
            "line": 180,
            "description": "Switches to an iFrame context\n\nSometimes you encounter situations, where you need to drive/access an iFrame sitting in your page.\nYou can access such frames with this method, but be aware of the fact, that the complete test context\nthan switches to the iframe context, every action and assertion will be executed within the iFrame context.\nBtw.: The domain of the IFrame can be whatever you want, this method has no same origin policy restrictions.\n\nIf you wan't to get back to the parents context, you have to use the [toParent](#meth-toParent) method.\n\n```html\n<div>\n  <iframe id=\"login\" src=\"/login.html\"/>\n</div>\n```\n\n```javascript\n test.open('http://adomain.withiframe.com')\n   .assert.title().is('Title of a page that embeds an iframe')\n   .toFrame('#login')\n     .assert.title().is('Title of a page that can be embedded as an iframe')\n   .toParent()\n   .done();\n```\n\n> NOTE: Buggy in Firefox",
            "api": "",
            "itemtype": "method",
            "name": "toFrame",
            "params": [
                {
                    "name": "selector",
                    "description": "Selector of the frame to switch to",
                    "type": "String"
                }
            ],
            "chainable": 1,
            "class": "Actions"
        },
        {
            "file": "lib/dalek/actions.js",
            "line": 225,
            "description": "Switches back to the parent page context when the test context has been\nswitched to an iFrame context\n\n```html\n<div>\n  <iframe id=\"login\" src=\"/login.html\"/>\n</div>\n```\n\n```javascript\n test.open('http://adomain.withiframe.com')\n   .assert.title().is('Title of a page that embeds an iframe')\n   .toFrame('#login')\n     .assert.title().is('Title of a page that can be embedded as an iframe')\n   .toParent()\n   .assert.title().is('Title of a page that embeds an iframe')\n   .done();\n```\n\n> NOTE: Buggy in Firefox",
            "api": "",
            "itemtype": "method",
            "name": "toParent",
            "chainable": 1,
            "class": "Actions"
        },
        {
            "file": "lib/dalek/actions.js",
            "line": 259,
            "description": "Switches to a different window context\n\nSometimes you encounter situations, where you need to access a different window, like popup windows.\nYou can access such windows with this method, but be aware of the fact, that the complete test context\nthan switches to the window context, every action and assertion will be executed within the chosen window context.\nBtw.: The domain of the window can be whatever you want, this method has no same origin policy restrictions.\n\nIf you want to get back to the parents context, you have to use the [toParentWindow](#meth-toParentWindow) method.\n\n```html\n<div>\n  <a onclick=\"window.open('http://google.com','goog','width=480, height=300')\">Open Google</a>\n</div>\n```\n\n```javascript\n test.open('http://adomain.com')\n   .assert.title().is('Title of a page that can open a popup window')\n   .toWindow('goog')\n     .assert.title().is('Google')\n   .toParentWindow()\n   .done();\n```\n\n> NOTE: Buggy in Firefox",
            "api": "",
            "itemtype": "method",
            "name": "toWindow",
            "params": [
                {
                    "name": "name",
                    "description": "Name of the window to switch to",
                    "type": "String"
                }
            ],
            "chainable": 1,
            "class": "Actions"
        },
        {
            "file": "lib/dalek/actions.js",
            "line": 299,
            "description": "Switches back to the parent window context when the test context has been\nswitched to a different window context\n\n```html\n<div>\n  <a onclick=\"window.open('http://google.com','goog','width=480, height=300')\">Open Google</a>\n</div>\n```\n\n```javascript\n test.open('http://adomain.com')\n   .assert.title().is('Title of a page that can open a popup window')\n   .toWindow('goog')\n     .assert.title().is('Google')\n   .toParentWindow()\n   .assert.title().is('Title of a page that can open a popup window')\n   .done();\n```\n\n> NOTE: Buggy in Firefox",
            "api": "",
            "itemtype": "method",
            "name": "toParentWindow",
            "chainable": 1,
            "class": "Actions"
        },
        {
            "file": "lib/dalek/actions.js",
            "line": 333,
            "description": "Wait until a resource that matches the given testFx is loaded to process a next step.\n\nTODO: IMPLEMENT",
            "itemtype": "method",
            "name": "waitForResource",
            "params": [
                {
                    "name": "ressource",
                    "description": "URL of the ressource that should be waited for",
                    "type": "String"
                },
                {
                    "name": "timeout",
                    "description": "Timeout in miliseconds",
                    "type": "Number"
                }
            ],
            "chainable": 1,
            "class": "Actions"
        },
        {
            "file": "lib/dalek/actions.js",
            "line": 351,
            "description": "Waits until the passed text is present in the page contents before processing the immediate next step.\n\nTODO: IMPLEMENT",
            "itemtype": "method",
            "name": "waitForText",
            "params": [
                {
                    "name": "text",
                    "description": "Text to be waited for",
                    "type": "String"
                },
                {
                    "name": "timeout",
                    "description": "Timeout in miliseconds",
                    "type": "Number"
                }
            ],
            "chainable": 1,
            "class": "Actions"
        },
        {
            "file": "lib/dalek/actions.js",
            "line": 369,
            "description": "Waits until an element matching the provided selector expression is visible in the remote DOM to process a next step.\n\nTODO: IMPLEMENT",
            "itemtype": "method",
            "name": "waitUntilVisible",
            "params": [
                {
                    "name": "selector",
                    "description": "Selector of the element that should be waited to become invisible",
                    "type": "String"
                },
                {
                    "name": "timeout",
                    "description": "Timeout in miliseconds",
                    "type": "Number"
                }
            ],
            "chainable": 1,
            "class": "Actions"
        },
        {
            "file": "lib/dalek/actions.js",
            "line": 393,
            "description": "Waits until an element matching the provided selector expression is no longer visible in remote DOM to process a next step.\n\nTODO: IMPLEMENT",
            "itemtype": "method",
            "name": "waitWhileVisible",
            "params": [
                {
                    "name": "selector",
                    "description": "Selector of the element that should be waited to become visible",
                    "type": "String"
                },
                {
                    "name": "timeout",
                    "description": "Timeout in miliseconds",
                    "type": "Number"
                }
            ],
            "chainable": 1,
            "class": "Actions"
        },
        {
            "file": "lib/dalek/actions.js",
            "line": 417,
            "description": "Take a screenshot of the current page or css element.\n\nThe pathname argument takes some placeholders that will be replaced\nPlaceholder:\n\n  - `:browser` - The browser name (e.g. 'Chrome', 'Safari', 'Firefox', etc.)\n  - `:version` -  The browser version (e.g. '10_0', '23_11_5', etc.)\n  - `:os` - The operating system (e.g. `OSX`, `Windows`, `Linux`)\n  - `:osVersion` - The operating system version (e.g `XP`, `7`, `10_8`, etc.)\n  - `:viewport` - The current viewport in pixels (e.g. `w1024_h768`)\n  - `:timestamp` - UNIX like timestapm (e.g. `637657345`)\n  - `:date` - Current date in format MM_DD_YYYY (e.g. `12_24_2013`)\n  - `:datetime` - Current datetime in format MM_DD_YYYY_HH_mm_ss (e.g. `12_24_2013_14_55_23`)\n\n```javascript\n// creates 'my/folder/my_file.png'\ntest.screenshot('my/folder/my_file');\n// creates 'my/page/in/safari/homepage.png'\ntest.screenshot('my/page/in/:browser/homepage');\n// creates 'my/page/in/safari_6_0_1/homepage.png'\ntest.screenshot('my/page/in/:browser_:version/homepage');\n// creates 'my/page/in/safari_6_0_1/on/osx/homepage.png'\ntest.screenshot('my/page/in/:browser_:version/on/:os/homepage');\n// creates 'my/page/in/safari_6_0_1/on/osx_10_8/homepage.png'\ntest.screenshot('my/page/in/:browser_:version/on/:os_:osVersion/homepage');\n// creates 'my/page/at/w1024_h768/homepage.png'\ntest.screenshot('my/page/at/:viewport/homepage');\n// creates 'my/page/at/637657345/homepage.png'\ntest.screenshot('my/page/in_time/:timestamp/homepage');\n// creates 'my/page/at/12_24_2013/homepage.png'\ntest.screenshot('my/page/in_time/:date/homepage');\n// creates 'my/page/at/12_24_2013_14_55_23/homepage.png'\ntest.screenshot('my/page/in_time/:datetime/homepage');\n```",
            "api": "",
            "itemtype": "method",
            "name": "screenshot",
            "params": [
                {
                    "name": "pathname",
                    "description": "Name of the folder and file the screenshot should be saved to",
                    "type": "String"
                },
                {
                    "name": "css",
                    "description": "selector of element should be screeshoted",
                    "type": "String"
                }
            ],
            "return": {
                "description": "chainable"
            },
            "class": "Actions"
        },
        {
            "file": "lib/dalek/actions.js",
            "line": 490,
            "description": "Generates a callback that will be fired when the action has been completed.\nThe callback will then store value into opts variable.",
            "itemtype": "method",
            "name": "_generateCallbackAssertion",
            "params": [
                {
                    "name": "type",
                    "description": "Type of the action (normalle the actions name)",
                    "type": "String"
                },
                {
                    "name": "hash",
                    "description": "Unique id of the action",
                    "type": "String"
                },
                {
                    "name": "opts",
                    "description": "Variable where will be stored result of execution of the action",
                    "type": "String"
                },
                {
                    "name": "key",
                    "description": "Name of the property where will be stored result of execution of the action",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The generated callback function",
                "type": "Function"
            },
            "access": "private",
            "tagname": "",
            "class": "Actions"
        },
        {
            "file": "lib/dalek/actions.js",
            "line": 524,
            "description": "Pause steps suite execution for a given amount of time, and optionally execute a step on done.\n\nThis makes sense, if you have a ticker for example, tht scrolls like every ten seconds\n& you want to assure that the visible content changes every ten seconds\n\n```javascript\ntest.open('http://myticker.org')\n  .assert.visible('.ticker-element:first-child', 'First ticker element is visible')\n  .wait(10000)\n  .assert.visible('.ticker-element:nth-child(2)', 'Snd. ticker element is visible')\n  .wait(10000)\n  .assert.visible('.ticker-element:last-child', 'Third ticker element is visible')\n  .done();\n```\nIf no timeout argument is given, a default timeout of 5 seconds will be used\n\n```javascript\ntest.open('http://myticker.org')\n  .assert.visible('.ticker-element:first-child', 'First ticker element is visible')\n  .wait()\n  .assert.visible('.ticker-element:nth-child(2)', 'Snd. ticker element is visible')\n  .wait()\n  .assert.visible('.ticker-element:last-child', 'Third ticker element is visible')\n  .done();\n```",
            "api": "",
            "itemtype": "method",
            "name": "wait",
            "params": [
                {
                    "name": "timeout",
                    "description": "in milliseconds",
                    "type": "Number"
                }
            ],
            "chainable": 1,
            "class": "Actions"
        },
        {
            "file": "lib/dalek/actions.js",
            "line": 564,
            "description": "Reloads current page location.\n\nThis is basically the same as hitting F5/refresh in your browser\n\n```javascript\ntest.open('http://google.com')\n  .reload()\n  .done();\n```",
            "api": "",
            "itemtype": "method",
            "name": "reload",
            "chainable": 1,
            "class": "Actions"
        },
        {
            "file": "lib/dalek/actions.js",
            "line": 587,
            "description": "Moves a step forward in browser's history.\n\nThis is basically the same as hitting the forward button in your browser\n\n```javascript\ntest.open('http://google.com')\n  .open('https://github.com')\n  .assert.url.is('https://github.com/', 'We are at GitHub')\n  .back()\n  .assert.url.is('http://google.com', 'We are at Google!')\n  .forward()\n  .assert.url.is('https://github.com/', 'Back at GitHub! Timetravel FTW')\n  .done();\n```",
            "api": "",
            "itemtype": "method",
            "name": "forward",
            "chainable": 1,
            "class": "Actions"
        },
        {
            "file": "lib/dalek/actions.js",
            "line": 615,
            "description": "Moves back a step in browser's history.\n\nThis is basically the same as hitting the back button in your browser\n\n```javascript\ntest.open('http://google.com')\n  .open('https://github.com')\n  .assert.url.is('https://github.com/', 'We are at GitHub')\n  .back()\n  .assert.url.is('http://google.com', 'We are at Google!')\n  .forward()\n  .assert.url.is('https://github.com/', 'Back at GitHub! Timetravel FTW');\n  .done();\n```",
            "api": "",
            "itemtype": "method",
            "name": "back",
            "chainable": 1,
            "class": "Actions"
        },
        {
            "file": "lib/dalek/actions.js",
            "line": 643,
            "description": "Performs a click on the element matching the provided selector expression.\n\nIf we take Daleks homepage (the one you're probably visiting right now),\nthe HTML looks something like this (it does not really, but hey, lets assume this for a second)\n\n```html\n<nav>\n  <ul>\n    <li><a id=\"homeapge\" href=\"/index.html\">DalekJS</a></li>\n    <li><a id=\"docs\" href=\"/docs.html\">Documentation</a></li>\n    <li><a id=\"faq\" href=\"/faq.html\">F.A.Q</a></li>\n  </ul>\n</nav>\n```\n\n```javascript\ntest.open('http://dalekjs.com')\n    .click('#faq')\n    .assert.title().is('DalekJS - Frequently asked questions', 'What the F.A.Q.')\n    .done();\n```\n\nBy default, this performs a left click.\nIn the future it might become the ability to also execute a \"right button\" click.\n\n> Note: Does not work correctly in Firefox when used on `<select>` & `<option>` elements",
            "api": "",
            "itemtype": "method",
            "name": "click",
            "params": [
                {
                    "name": "selector",
                    "description": "Selector of the element to be clicked",
                    "type": "String"
                }
            ],
            "chainable": 1,
            "class": "Actions"
        },
        {
            "file": "lib/dalek/actions.js",
            "line": 689,
            "description": "Submits a form.\n\n```html\n<form id=\"skaaro\" action=\"skaaro.php\" method=\"GET\">\n  <input type=\"hidden\" name=\"intheshadows\" value=\"itis\"/>\n  <input type=\"text\" name=\"truth\" id=\"truth\" value=\"\"/>\n</form>\n```\n\n```javascript\ntest.open('http://home.dalek.com')\n    .type('#truth', 'out there is')\n    .submit('#skaaro')\n    .done();\n```\n\n> Note: Does not work in Firefox yet",
            "api": "",
            "itemtype": "method",
            "name": "submit",
            "params": [
                {
                    "name": "selector",
                    "description": "Selector of the form to be submitted",
                    "type": "String"
                }
            ],
            "chainable": 1,
            "class": "Actions"
        },
        {
            "file": "lib/dalek/actions.js",
            "line": 726,
            "description": "Performs an HTTP request for opening a given location.\nYou can forge GET, POST, PUT, DELETE and HEAD requests.\n\nBasically the same as typing a location into your browsers URL bar and\nhitting return.\n\n```javascript\ntest.open('http://dalekjs.com')\n    .assert.url().is('http://dalekjs.com', 'DalekJS I\\'m in you')\n    .done();\n```",
            "api": "",
            "itemtype": "method",
            "name": "open",
            "params": [
                {
                    "name": "location",
                    "description": "URL of the page to open",
                    "type": "String"
                }
            ],
            "chainable": 1,
            "class": "Actions"
        },
        {
            "file": "lib/dalek/actions.js",
            "line": 757,
            "description": "Types a text into an input field or text area.\nAnd yes, it really types, character for character, like you would\ndo when using your keyboard.\n\n\n```html\n<form id=\"skaaro\" action=\"skaaro.php\" method=\"GET\">\n  <input type=\"hidden\" name=\"intheshadows\" value=\"itis\"/>\n  <input type=\"text\" name=\"truth\" id=\"truth\" value=\"\"/>\n</form>\n```\n\n```javascript\ntest.open('http://home.dalek.com')\n    .type('#truth', 'out there is')\n    .assert.val('#truth', 'out there is', 'Text has been set')\n    .done();\n```\n\nYou can also send special keys using unicode.\n\n * ```javascript\ntest.open('http://home.dalek.com')\n    .type('#truth', 'out \\uE008there\\uE008 is')\n    .assert.val('#truth', 'out THERE is', 'Text has been set')\n    .done();\n```\nYou can go [here](https://code.google.com/p/selenium/wiki/JsonWireProtocol#/session/:sessionId/element/:id/value) to read up on special keys and unicodes for them (note that a code of U+EXXX is actually written in code as \\uEXXX).\n\n> Note: Does not work correctly in Firefox with special keys",
            "api": "",
            "itemtype": "method",
            "name": "type",
            "params": [
                {
                    "name": "selector",
                    "description": "Selector of the form field to be filled",
                    "type": "String"
                },
                {
                    "name": "keystrokes",
                    "description": "Text to be applied to the element",
                    "type": "String"
                }
            ],
            "chainable": 1,
            "class": "Actions"
        },
        {
            "file": "lib/dalek/actions.js",
            "line": 809,
            "description": "This acts just like .type() with a key difference.\nThis action can be used on non-input elements (useful for test site wide keyboard shortcuts and the like).\nSo assumeing we have a keyboard shortcut that display an alert box, we could test that with something like this:\n\n```javascript\ntest.open('http://home.dalek.com')\n    .sendKeys('body', '\\uE00C')\n    .assert.dialogText('press the escape key give this alert text')\n    .done();\n```\n\n\n> Note: Does not work correctly in Firefox with special keys",
            "api": "",
            "itemtype": "method",
            "name": "sendKeys",
            "params": [
                {
                    "name": "selector",
                    "description": "Selector of the form field to be filled",
                    "type": "String"
                },
                {
                    "name": "keystrokes",
                    "description": "Text to be applied to the element",
                    "type": "String"
                }
            ],
            "chainable": 1,
            "class": "Actions"
        },
        {
            "file": "lib/dalek/actions.js",
            "line": 844,
            "description": "Types a text into the text input field of a prompt dialog.\nLike you would do when using your keyboard.\n\n```html\n<div>\n  <a id=\"aquestion\" onclick=\"this.innerText = window.prompt('Your favourite companion:')\">????</a>\n</div>\n```\n\n```javascript\n test.open('http://adomain.com')\n    .click('#aquestion')\n    .answer('Rose')\n    .assert.text('#aquestion').is('Rose', 'Awesome she was!')\n    .done();\n```\n\n\n> Note: Does not work in Firefox & PhantomJS",
            "api": "",
            "itemtype": "method",
            "name": "answer",
            "params": [
                {
                    "name": "keystrokes",
                    "description": "Text to be applied to the element",
                    "type": "String"
                }
            ],
            "return": {
                "description": "chainable"
            },
            "class": "Actions"
        },
        {
            "file": "lib/dalek/actions.js",
            "line": 878,
            "description": "Executes a JavaScript function within the browser context\n\n```javascript\n test.open('http://adomain.com')\n    .execute(function () {\n      window.myFramework.addRow('foo');\n      window.myFramework.addRow('bar');\n    })\n    .done();\n```\n\nYou can also apply arguments to the function\n\n```javascript\n test.open('http://adomain.com')\n    .execute(function (paramFoo, aBar) {\n      window.myFramework.addRow(paramFoo);\n      window.myFramework.addRow(aBar);\n    }, 'foo', 'bar')\n    .done();\n```\n\n> Note: Buggy in Firefox",
            "api": "",
            "itemtype": "method",
            "name": "execute",
            "params": [
                {
                    "name": "script",
                    "description": "JavaScript function that should be executed",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "chainable"
            },
            "class": "Actions"
        },
        {
            "file": "lib/dalek/actions.js",
            "line": 917,
            "description": "Waits until a function returns true to process any next step.\n\nYou can also set a callback on timeout using the onTimeout argument,\nand set the timeout using the timeout one, in milliseconds. The default timeout is set to 5000ms.\n\n```javascript\n test.open('http://adomain.com')\n    .waitFor(function () {\n      return window.myCheck === true;\n    })\n    .done();\n```\n\nYou can also apply arguments to the function, as well as a timeout\n\n```javascript\n test.open('http://adomain.com')\n    .waitFor(function (aCheck) {\n      return window.myThing === aCheck;\n    }, ['arg1', 'arg2'], 10000)\n    .done();\n```\n\n> Note: Buggy in Firefox",
            "itemtype": "method",
            "name": "waitFor",
            "params": [
                {
                    "name": "fn",
                    "description": "Async function that resolves an promise when ready",
                    "type": "Function"
                },
                {
                    "name": "args",
                    "description": "Additional arguments",
                    "type": "Array"
                },
                {
                    "name": "timeout",
                    "description": "Timeout in miliseconds",
                    "type": "Number"
                }
            ],
            "chainable": 1,
            "api": "",
            "class": "Actions"
        },
        {
            "file": "lib/dalek/actions.js",
            "line": 960,
            "description": "Accepts an alert/prompt/confirm dialog. This is basically the same actions as when\nyou are clicking okay or hitting return in one of that dialogs.\n\n```html\n<div>\n  <a id=\"attentione\" onclick=\"window.alert('Alonsy!')\">ALERT!ALERT!</a>\n</div>\n```\n\n```javascript\n test.open('http://adomain.com')\n    // alert appears\n    .click('#attentione')\n    // alert is gone\n    .accept()\n    .done();\n```\n\n> Note: Does not work in Firefox & PhantomJS",
            "api": "",
            "itemtype": "method",
            "name": "accept",
            "return": {
                "description": "chainable"
            },
            "class": "Actions"
        },
        {
            "file": "lib/dalek/actions.js",
            "line": 993,
            "description": "Dismisses an prompt/confirm dialog. This is basically the same actions as when\nyou are clicking cancel in one of that dialogs.\n\n```html\n<div>\n  <a id=\"nonono\" onclick=\"(this.innerText = window.confirm('No classic doctors in the 50th?') ? 'Buh!' : ':(') \">What!</a>\n</div>\n```\n\n```javascript\n test.open('http://adomain.com')\n    // prompt appears\n    .click('#nonono')\n    // prompt is gone\n    .dismiss()\n    .assert.text('#nonono').is(':(', 'So sad')\n    .done();\n```\n\n> Note: Does not work in Firefox & PhantomJS",
            "api": "",
            "itemtype": "method",
            "name": "dismiss",
            "return": {
                "description": "chainable"
            },
            "class": "Actions"
        },
        {
            "file": "lib/dalek/actions.js",
            "line": 1027,
            "description": "Resizes the browser window to a set of given dimensions (in px).\nThe default configuration of dalek opening pages is a width of 1280px\nand a height of 1024px. You can specify your own default in the configuration.\n\n```html\n<div>\n  <span id=\"magicspan\">The span in the fireplace</span>\n</div>\n```\n\n```css\n#magicspan {\n  display: inline;\n}\n\n// @media all and (max-width: 500px) and (min-width: 300px)\n#magicspan {\n  display: none;\n}\n```\n\n```javascript\n test.open('http://adomain.com')\n    .assert.visible('#magicspan', 'Big screen, visible span')\n    .resize({width: 400, height: 500})\n    .assert.notVisible('#magicspan', 'Small screen, no visible span magic!')\n    .done();\n```\n\n\n> Note: Does not work in Firefox",
            "api": "",
            "itemtype": "method",
            "name": "resize",
            "params": [
                {
                    "name": "dimensions",
                    "description": "Width and height as properties to apply",
                    "type": "Object"
                }
            ],
            "chainable": 1,
            "class": "Actions"
        },
        {
            "file": "lib/dalek/actions.js",
            "line": 1073,
            "description": "Maximizes the browser window.\n\n```html\n<div>\n  <span id=\"magicspan\">The span in the fireplace</span>\n</div>\n```\n\n```css\n#magicspan {\n  display: inline;\n}",
            "media": "all and (max-width: 500px) and (min-width: 300px) {\n  #magicspan {\n    display: none;\n  }\n}\n```\n\n```javascript\n test.open('http://adomain.com')\n    .resize({width: 400, height: 500})\n    .assert.notVisible('#magicspan', 'Small screen, no visible span magic!')\n    .maximize()\n    .assert.visible('#magicspan', 'Big screen, visible span')\n    .done();\n```\n\n> Note: Does not work in Firefox and PhantomJS",
            "api": "",
            "itemtype": "method",
            "name": "maximize",
            "chainable": 1,
            "class": "Actions"
        },
        {
            "file": "lib/dalek/actions.js",
            "line": 1117,
            "description": "Sets a cookie.\nMore configuration options will be implemented in the future,\nby now, you can only set a cookie with a specific name and contents.\nThis will be a domain wide set cookie.\n\n```javascript\n test.open('http://adomain.com')\n     .setCookie('my_cookie_name', 'my=content')\n     .done();\n```",
            "api": "",
            "itemtype": "method",
            "name": "setCookie",
            "chainable": 1,
            "class": "Actions"
        },
        {
            "file": "lib/dalek/actions.js",
            "line": 1141,
            "description": "Waits until an element matching the provided\nselector expression exists in remote DOM to process any next step.\n\nLets assume we have a ticker that loads its contents via AJAX,\nand appends new elements, when the call has been successfully answered:\n\n```javascript\ntest.open('http://myticker.org')\n  .assert.text('.ticker-element:first-child', 'First!', 'First ticker element is visible')\n  // now we load the next ticker element, defsult timeout is 5 seconds\n  .waitForElement('.ticker-element:nth-child(2)')\n  .assert.text('.ticker-element:nth-child(2)', 'Me snd. one', 'Snd. ticker element is visible')\n  // Lets assume that this AJAX call can take longer, so we raise the default timeout to 10 seconds\n  .waitForElement('.ticker-element:last-child', 10000)\n  .assert.text('.ticker-element:last-child', 'Me, third one!', 'Third ticker element is visible')\n  .done();\n```",
            "api": "",
            "itemtype": "method",
            "name": "waitForElement",
            "params": [
                {
                    "name": "selector",
                    "description": "Selector that matches the element to wait for",
                    "type": "String"
                },
                {
                    "name": "timeout",
                    "description": "Timeout in milliseconds",
                    "type": "Number"
                }
            ],
            "chainable": 1,
            "class": "Actions"
        },
        {
            "file": "lib/dalek/actions.js",
            "line": 1180,
            "description": "Fills the fields of a form with given values.\n\n```html\n<input type=\"text\" value=\"not really a value\" id=\"ijustwannahaveavalue\"/>\n```\n\n```javascript\ntest.open('http://dalekjs.com')\n    .setValue('#ijustwannahaveavalue', 'a value')\n    .assert.val('#ijustwannahaveavalue', 'a value', 'Value is changed');\n```",
            "api": "",
            "itemtype": "method",
            "name": "setValue",
            "params": [
                {
                    "name": "selector",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Actions"
            },
            "class": "Actions"
        },
        {
            "file": "lib/dalek/actions.js",
            "line": 1218,
            "description": "Logs a part of the remote dom\n\n```html\n<body>\n  <div id=\"smth\">\n    <input type=\"hidden\" value=\"not really a value\" id=\"ijustwannahaveavalue\"/>\n  </div>\n</body>\n```\n\n```javascript\ntest.open('http://dalekjs.com/guineapig')\n    .log.dom('#smth')\n    .done();\n```\n\nWill output this:\n\n```html\n DOM: #smth <input type=\"hidden\" value=\"not really a value\" id=\"ijustwannahaveavalue\"/>\n```",
            "api": "",
            "itemtype": "method",
            "name": "log.dom",
            "params": [
                {
                    "name": "selector",
                    "description": "CSS selector",
                    "type": "String"
                }
            ],
            "chainable": 1,
            "class": "Actions"
        },
        {
            "file": "lib/dalek/actions.js",
            "line": 1266,
            "description": "Logs a user defined message\n\n```javascript\ntest.open('http://dalekjs.com/guineapig')\n    .execute(function () {\n      this.data('aKey', 'aValue');\n    })\n    .log.message(function () {\n      return test.data('aKey'); // outputs MESSAGE: 'aValue'\n    })\n    .done();\n```\n\n'Normal' messages can be logged too:\n\n```javascript\ntest.open('http://dalekjs.com/guineapig')\n    .log.message('FooBar') // outputs MESSAGE: FooBar\n    .done();\n```",
            "api": "",
            "itemtype": "method",
            "name": "log.message",
            "params": [
                {
                    "name": "message",
                    "description": "",
                    "type": "Function|string"
                }
            ],
            "chainable": 1,
            "class": "Actions"
        },
        {
            "file": "lib/dalek/actions.js",
            "line": 1309,
            "description": "Generates a callback that will be fired when the action has been completed.\nThe callback itself will then validate the answer and will also emit an event\nthat the action has been successfully executed.",
            "itemtype": "method",
            "name": "_generateCallbackAssertion",
            "params": [
                {
                    "name": "key",
                    "description": "Unique key of the action",
                    "type": "String"
                },
                {
                    "name": "type",
                    "description": "Type of the action (normalle the actions name)",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The generated callback function",
                "type": "Function"
            },
            "access": "private",
            "tagname": "",
            "class": "Actions"
        },
        {
            "file": "lib/dalek/actions.js",
            "line": 1363,
            "description": "Adds a method to the queue of actions/assertions to execute",
            "itemtype": "method",
            "name": "_addToActionQueue",
            "params": [
                {
                    "name": "opts",
                    "description": "Options of the action to invoke",
                    "type": "Object"
                },
                {
                    "name": "driverMethod",
                    "description": "Name of the method to call on the driver",
                    "type": "String"
                },
                {
                    "name": "A",
                    "description": "callback function that will be executed when the action has been executed",
                    "type": "Function"
                }
            ],
            "access": "private",
            "tagname": "",
            "chainable": 1,
            "class": "Actions"
        },
        {
            "file": "lib/dalek/actions.js",
            "line": 1445,
            "description": "Close the active window and automatically selects the parent window.\n\n```javascript\nthis.test.toWindow('test');\nthis.test.close();\n\n//you can now write your code as if the original parent window was selected because .close()\n//selects that automatically for you so you don't have to call .toParentWindow() everytime\n```",
            "api": "",
            "itemtype": "method",
            "name": "close",
            "chainable": 1,
            "class": "Actions"
        },
        {
            "file": "lib/dalek/assertions.js",
            "line": 61,
            "description": "It can be really cumbersome to always write assert, assert & assert\nall over the place when you're doing multiple assertions.\nTo avoid this, open an assertion context in your test which allows\nyou to write (n) assertions without having to write 'assert' before each.\n\nSo, instead of writing this:\n\n```javascript\ntest.open('http://doctorwhotv.co.uk/')\n    .assert.text('#nav').is('Navigation')\n    .assert.visible('#nav')\n    .assert.attr('#nav', 'data-nav', 'true')\n    .done();\n```\n\nyou can write this:\n\n```javascript\ntest.open('http://doctorwhotv.co.uk/')\n    .assert.chain()\n      .text('#nav').is('Navigation')\n      .visible('#nav')\n      .attr('#nav', 'data-nav', 'true')\n    .end()\n    .done();\n```\n\nto make it even more concise, you can combine this with the [query](actions.html#meth-query) method:\n\n```javascript\ntest.open('http://doctorwhotv.co.uk/')\n    .assert.chain()\n      .query('#nav')\n          .text().is('Navigation')\n          .visible()\n          .attr('data-nav', 'true')\n        .end()\n    .end()\n    .done();\n```\n\nAlways make sure to terminate it with the [end](#meth-end) method!",
            "api": "",
            "itemtype": "method",
            "name": "chain",
            "chainable": 1,
            "class": "Dalek.Internal.Assertions",
            "module": "Assertions",
            "namespace": "Dalek.Internal"
        },
        {
            "file": "lib/dalek/assertions.js",
            "line": 116,
            "description": "Terminates an assertion chain or a query\n\n```javascript\ntest.open('http://doctorwhotv.co.uk/')\n    .assert.chain()\n      .query('#nav')\n          .text().is('Navigation')\n          .visible()\n          .attr('data-nav', 'true')\n        .end()\n    .end()\n    .done();\n```",
            "api": "",
            "itemtype": "method",
            "name": "end",
            "chainable": 1,
            "class": "Dalek.Internal.Assertions",
            "module": "Assertions",
            "namespace": "Dalek.Internal"
        },
        {
            "file": "lib/dalek/assertions.js",
            "line": 148,
            "description": "Asserts that a given resource does exist in the environment.",
            "itemtype": "method",
            "name": "resourceExists",
            "params": [
                {
                    "name": "url",
                    "description": "URL of the resource to check",
                    "type": "String"
                },
                {
                    "name": "message",
                    "description": "Message for the test reporter",
                    "type": "String"
                }
            ],
            "chainable": 1,
            "class": "Dalek.Internal.Assertions",
            "module": "Assertions",
            "namespace": "Dalek.Internal"
        },
        {
            "file": "lib/dalek/assertions.js",
            "line": 164,
            "description": "Asserts that a given element appears n times on the page.\n\nGiven this portion of HTML, you would like to assure that all of these elements\nare ending up in your rendered markup on your page.\n\n```html\n<section id=\"blog-overview\">\n  <article class=\"teaser\"></article>\n  <article class=\"teaser\"></article>\n  <article class=\"teaser\"></article>\n  <article class=\"teaser\"></article>\n</section>\n```\n\nThe simple solution is to check if all these elements are present\n\n```javascript\ntest.assert.numberOfElements('#blog-overview .teaser', 4, '4 blog teasers are present')\n```\nThe alternate syntax for this is:\n\n```javascript\ntest.assert.numberOfElements('#blog-overview .teaser')\n    .is(4, '4 blog teasers are present')\n```\n\nIf you are not sure how many elements will exactly end up in your markup,\nyou could use the between assertion handler\n\n```javascript\ntest.assert.numberOfElements('#blog-overview .teaser')\n    .is.between([2, 6], 'Between 2 and 6 blog teasers are present')\n```\n\nIf you dealing with the situation that you have a minimum of elements,\nyou expect, you can use this helper:\n\n```javascript\ntest.assert.numberOfElements('#blog-overview .teaser')\n    .is.gt(2, 'At least 3 blog teasers are present')\n```\nIf you want to know if its 'greater than equal', use this one\n\n```javascript\ntest.assert.numberOfElements('#blog-overview .teaser')\n    .is.gte(2, 'At least 2 blog teasers are present')\n```\nas well as their 'lower than' and 'lower than equal' equivalents.\n\n```javascript\ntest.assert.numberOfElements('#blog-overview .teaser')\n    .is.lt(5, 'Less than 5 blog teasers are present')\n```\n\n```javascript\ntest.assert.numberOfElements('#blog-overview .teaser')\n    .is.lte(5, 'Less than, or 5 blog teasers are present')\n```\nAnd if you just want to know, if a certain amount of teasers isnʼt present,\nyou can still use the not() assertion helper\n\n```javascript\ntest.assert.numberOfElements('#blog-overview .teaser')\n    .is.not(5, 'There are more or less than 5 teasers present')\n```",
            "api": "",
            "itemtype": "method",
            "name": "numberOfElements",
            "params": [
                {
                    "name": "selector",
                    "description": "Selector that matches the elements to test",
                    "type": "String"
                },
                {
                    "name": "expected",
                    "description": "Expected test result",
                    "type": "String"
                },
                {
                    "name": "message",
                    "description": "Message for the test reporter",
                    "type": "String"
                }
            ],
            "chainable": 1,
            "class": "Dalek.Internal.Assertions",
            "module": "Assertions",
            "namespace": "Dalek.Internal"
        },
        {
            "file": "lib/dalek/assertions.js",
            "line": 253,
            "description": "Asserts that a given element is visible n times in the current viewport.\n\nGiven this portion of HTML, you would like to assure that all of these elements\n are ending up in your rendered markup on your page.\n```html\n <section id=\"blog-overview\">\n   <article class=\"teaser\"></article>\n   <article class=\"teaser\"></article>\n   <article class=\"teaser\"></article>\n   <article class=\"teaser\"></article>\n </section>\n ```\nThe simple solution is to check if all these elements are visible\n```javascript\n test.assert.numberOfVisibleElements('#blog-overview .teaser', 4, '4 blog teasers are visible')\n ```\n The alternate syntax for this is:\n```javascript\n test.assert.numberOfVisibleElements('#blog-overview .teaser')\n     .is(4, '4 blog teasers are visible')\n ```\nIf you are not sure how many elements will exactly be shown in the current viewport,\n you could use the between assertion handler\n```javascript\n test.assert.numberOfVisibleElements('#blog-overview .teaser')\n     .is.between(2, 6, 'Between 2 and 6 blog teasers are visible')\n ```\nIf you dealing with the situation that you have a minimum of elements,\n you expect, use this helper:\n```javascript\n test.assert.numberOfVisibleElements('#blog-overview .teaser')\n     .is.gt(2, 'At least 3 blog teasers are visible')\n ```\n If you want to know if its 'greater than equal', you can use this one\n```javascript\n test.assert.numberOfVisibleElements('#blog-overview .teaser')\n     .is.gte(2, 'At least 2 blog teasers are visible')\n ```\n as well as their 'lower than' and 'lower than equal' equivalents.\n```javascript\n test.assert.numberOfVisibleElements('#blog-overview .teaser')\n     .is.lt(5, 'Less than 5 blog teasers are visible')\n ```\n```javascript\n test.assert.numberOfVisibleElements('#blog-overview .teaser')\n     .is.lte(5, 'Less than, or 5 blog teasers are visible')\n ```\n And if you just want to know, if a certain amount of teasers isnʼt visible,\n you can still use the ':not(): assertion helper\n```javascript\n test.assert.numberOfVisibleElements('#blog-overview .teaser')\n     .is.not(5, 'There are more or less than 5 teasers visible')\n ```\n> NOTE: Buggy on all browsers",
            "api": "",
            "itemtype": "method",
            "name": "numberOfVisibleElements",
            "params": [
                {
                    "name": "selector",
                    "description": "Selector that matches the elements to test",
                    "type": "String"
                },
                {
                    "name": "expected",
                    "description": "Expected test result",
                    "type": "String"
                },
                {
                    "name": "message",
                    "description": "Message for the test reporter",
                    "type": "String"
                }
            ],
            "chainable": 1,
            "class": "Dalek.Internal.Assertions",
            "module": "Assertions",
            "namespace": "Dalek.Internal"
        },
        {
            "file": "lib/dalek/assertions.js",
            "line": 346,
            "description": "Asserts that a given form field has the provided value.\n\nGiven this portion of HTML, we would like to get the information which option element\nis currently selected.\n\n```html\n<form name=\"fav-doctor\" id=\"fav-doctor\">\n  <select id=\"the-doctors\">\n    <option value=\"9\">Eccleston</option>\n    <option selected value=\"10\">Tennant</option>\n    <option value=\"11\">Smith</option>\n  </select>\n</form>\n```\n\n```javascript\ntest\n  .assert.val('#the-doctors', 10, 'David is the favourite')\n  // lets change the favourite by selection the last option\n .click('#the-doctors option:last')\n .assert.val('#the-doctors', 11, 'Matt is now my favourite, bow ties are cool')\n```\n\nThis assertion is capable of getting the values from every form element\nthat holds a value attribute\n\nGetting texts out of normal input fields is pretty straight forward\n\n```html\n<label for=\"fav-enemy\">Tell my your favourity Who enemy:</label>\n<input id=\"fav-enemy\" name=\"fav-enemy\" type=\"text\" value=\"Daleks\" />\n```\n\n```javascript\ntest\n  .assert.val('#fav-enemy', 'Daleks', 'Daleks are so cute')\n  // lets change the favourite by typing smth. new\n .type('#fav-enemy', 'Cyberman')\n .assert.val('#fav-enemy', 'Cyberman', 'Cyberman are so cyber')\n```",
            "api": "",
            "itemtype": "method",
            "name": "val",
            "params": [
                {
                    "name": "selector",
                    "description": "Selector that matches the elements to test",
                    "type": "String"
                },
                {
                    "name": "expected",
                    "description": "Expected test result",
                    "type": "String"
                },
                {
                    "name": "message",
                    "description": "Message for the test reporter",
                    "type": "String"
                }
            ],
            "chainable": 1,
            "class": "Dalek.Internal.Assertions",
            "module": "Assertions",
            "namespace": "Dalek.Internal"
        },
        {
            "file": "lib/dalek/assertions.js",
            "line": 410,
            "description": "Checks the computed style.\nNote: When selecting values like em or percent, they will be converted to px. So it's currently not possible\nto check em, %, ... values, only px.\n\n```html\n<div id=\"superColoredElement\">Rose</div>\n```\n\n```css\n#superColoredElement {\n  background-color: rgba(255, 0, 0, 1);\n  color: rgba(0, 128, 0, 1);\n}\n```\n\n```javascript\n test\n   .open('http://unicorns.rainbows.io')\n   .assert.css('#superColoredElement', 'background-color', 'rgba(255, 0, 0, 1)')\n   .assert.css('#superColoredElement', 'color', 'rgba(0, 128, 0, 1)')\n   .done();\n```\n\nCan also check if a computed style is greater or lower than the expected value.\nTODO: We might extract the part that determines the comparison operator to reuse it in other test. We might also\n      add >= and <=.\n\n```html\n<div id=\"fancyPlacedElement\">Tulip</div>\n```\n\n```css\n#fancyPlacedElement {\n  top: 100px;\n}\n```\n\n```javascript\n test\n   .open('http://unicorns.rainbows.io')\n   .assert.css('#fancyPlacedElement', 'top', '>50px') // 100 is greater than 50, success\n   .assert.css('#fancyPlacedElement', 'top', '<150px') // 100 is lower than 150, success\n   .assert.css('#fancyPlacedElement', 'top', '>150px') // 100 is lower than 150, fail\n   .assert.css('#fancyPlacedElement', 'top', '<50px') // 100 is greater than 50, fail\n   .done();\n```",
            "api": "",
            "itemtype": "method",
            "name": "css",
            "params": [
                {
                    "name": "selector",
                    "description": "Selector that matches the elements to test",
                    "type": "String"
                },
                {
                    "name": "property",
                    "description": "CSS property to check",
                    "type": "String"
                },
                {
                    "name": "expected",
                    "description": "Expected test result",
                    "type": "String"
                },
                {
                    "name": "message",
                    "description": "Message for the test reporter",
                    "type": "String"
                }
            ],
            "chainable": 1,
            "class": "Dalek.Internal.Assertions",
            "module": "Assertions",
            "namespace": "Dalek.Internal"
        },
        {
            "file": "lib/dalek/assertions.js",
            "line": 501,
            "description": "Checks the actual width of an element.\n\n```html\n  <div id=\"fixed-dimensions\" style=\"width: 100px\"></div>\n```\n\n```javascript\n test\n   .open('http://localhost:5000/index.html')\n   // all true, all pixel\n   .assert.width('#fixed-dimensions', 100)\n   .assert.width('#fixed-dimensions').is(100)\n   .assert.width('#fixed-dimensions').is.not(100)\n   .assert.width('#fixed-dimensions').is.gt(90)\n   .assert.width('#fixed-dimensions').is.gte(97)\n   .assert.width('#fixed-dimensions').is.lt(120)\n   .assert.width('#fixed-dimensions').is.lte(110)\n   .assert.width('#fixed-dimensions').is.between([90, 110])\n   .done();\n```",
            "api": "",
            "itemtype": "method",
            "name": "width",
            "params": [
                {
                    "name": "selector",
                    "description": "Selector that matches the elements to test",
                    "type": "String"
                },
                {
                    "name": "expected",
                    "description": "Expected test result",
                    "type": "String"
                },
                {
                    "name": "message",
                    "description": "Message for the test reporter",
                    "type": "String"
                }
            ],
            "chainable": 1,
            "class": "Dalek.Internal.Assertions",
            "module": "Assertions",
            "namespace": "Dalek.Internal"
        },
        {
            "file": "lib/dalek/assertions.js",
            "line": 545,
            "description": "Checks the actual height of an element.\n\n```html\n  <div id=\"fixed-dimensions\" style=\"height: 100px\"></div>\n```\n\n```javascript\n test\n   .open('http://localhost:5000/index.html')\n   // all true, all pixel\n   .assert.height('#fixed-dimensions', 100)\n   .assert.height('#fixed-dimensions').is(100)\n   .assert.height('#fixed-dimensions').is.not(100)\n   .assert.height('#fixed-dimensions').is.gt(90)\n   .assert.height('#fixed-dimensions').is.gte(97)\n   .assert.height('#fixed-dimensions').is.lt(120)\n   .assert.height('#fixed-dimensions').is.lte(110)\n   .assert.height('#fixed-dimensions').is.between([90, 110])\n   .done();\n```",
            "api": "",
            "itemtype": "method",
            "name": "height",
            "params": [
                {
                    "name": "selector",
                    "description": "Selector that matches the elements to test",
                    "type": "String"
                },
                {
                    "name": "expected",
                    "description": "Expected test result",
                    "type": "String"
                },
                {
                    "name": "message",
                    "description": "Message for the test reporter",
                    "type": "String"
                }
            ],
            "chainable": 1,
            "class": "Dalek.Internal.Assertions",
            "module": "Assertions",
            "namespace": "Dalek.Internal"
        },
        {
            "file": "lib/dalek/assertions.js",
            "line": 589,
            "description": "Determine if an <option> element, or an <input> element of type checkbox or radio is currently selected.\n\n```html\n<input type=\"checkbox\" id=\"unchecked_checkbox\" name=\"unchecked_checkbox\"/>\n<input type=\"checkbox\" id=\"checked_checkbox\" name=\"checked_checkbox\" checked=\"checked\"/>\n<select id=\"select_elm\" name=\"select_elm\">\n  <option value=\"9\">Eccleston</option>\n  <option selected value=\"10\">Tennant</option>\n  <option value=\"11\">Smith</option>\n</select>\n```\n\nChecking radio and checkboxes:\n\n```javascript\n test\n   .open('http://selectables.org')\n   .assert.selected('#checked_checkbox')\n   .done();\n```\n\nChecking option elements:\n\n```javascript\n test\n   .open('http://selectables.org')\n   .assert.selected('#select_elm option:nth-child(2)')\n   .done();\n```",
            "api": "",
            "itemtype": "method",
            "name": "selected",
            "params": [
                {
                    "name": "selector",
                    "description": "Selector that matches the elements to test",
                    "type": "String"
                },
                {
                    "name": "message",
                    "description": "Message for the test reporter",
                    "type": "String"
                }
            ],
            "chainable": 1,
            "class": "Dalek.Internal.Assertions",
            "module": "Assertions",
            "namespace": "Dalek.Internal"
        },
        {
            "file": "lib/dalek/assertions.js",
            "line": 640,
            "description": "Determine if an <option> element, or an <input> element of type\ncheckbox or radio is currently not selected.\n\n```html\n<input type=\"checkbox\" id=\"unchecked_checkbox\" name=\"unchecked_checkbox\"/>\n<input type=\"checkbox\" id=\"checked_checkbox\" name=\"checked_checkbox\" checked=\"checked\"/>\n<select id=\"select_elm\" name=\"select_elm\">\n  <option value=\"9\">Eccleston</option>\n  <option selected value=\"10\">Tennant</option>\n  <option value=\"11\">Smith</option>\n</select>\n```\n\nChecking radio and checkboxes:\n\n```javascript\n test\n   .open('http://selectables.org')\n   .assert.notSelected('#unchecked_checkbox')\n   .done();\n```\n\nChecking option elements:\n\n```javascript\n test\n   .open('http://selectables.org')\n   .assert.notSelected('#select_elm option:last-child')\n   .done();\n```",
            "api": "",
            "itemtype": "method",
            "name": "notSelected",
            "params": [
                {
                    "name": "selector",
                    "description": "Selector that matches the elements to test",
                    "type": "String"
                },
                {
                    "name": "message",
                    "description": "Message for the test reporter",
                    "type": "String"
                }
            ],
            "chainable": 1,
            "class": "Dalek.Internal.Assertions",
            "module": "Assertions",
            "namespace": "Dalek.Internal"
        },
        {
            "file": "lib/dalek/assertions.js",
            "line": 692,
            "description": "Determine if an element is currently enabled.\n\n```html\n<input id=\"onmars\" type=\"text\" size=\"50\" name=\"onmars\" placeholder=\"State your name, rank and intention!\"></input>\n```\n\n```javascript\ntest\n  .open('http://doctor.thedoctor.com/doctor')\n  .assert.enabled('#onmars', 'Is enabled!')\n  .done();\n```",
            "api": "",
            "itemtype": "method",
            "name": "enabled",
            "params": [
                {
                    "name": "selector",
                    "description": "Selector that matches the elements to test",
                    "type": "String"
                },
                {
                    "name": "message",
                    "description": "Message for the test reporter",
                    "type": "String"
                }
            ],
            "chainable": 1,
            "class": "Dalek.Internal.Assertions",
            "module": "Assertions",
            "namespace": "Dalek.Internal"
        },
        {
            "file": "lib/dalek/assertions.js",
            "line": 726,
            "description": "Determine if an element is currently disabled.\n\n```html\n<input disabled id=\"onearth\" type=\"text\" size=\"50\" name=\"onearth\" placeholder=\"State your name, rank and intention!\"></input>\n```\n\n```javascript\ntest\n  .open('http://doctor.thedoctor.com/doctor')\n  .assert.disabled('#onearth', 'Is disabled!')\n  .done();\n```",
            "api": "",
            "itemtype": "method",
            "name": "disabled",
            "params": [
                {
                    "name": "selector",
                    "description": "Selector that matches the elements to test",
                    "type": "String"
                },
                {
                    "name": "message",
                    "description": "Message for the test reporter",
                    "type": "String"
                }
            ],
            "chainable": 1,
            "class": "Dalek.Internal.Assertions",
            "module": "Assertions",
            "namespace": "Dalek.Internal"
        },
        {
            "file": "lib/dalek/assertions.js",
            "line": 760,
            "description": "Checks the contents of a cookie.\n\n```javascript\n test\n   .open('http://cookiejar.io/not_your_mothers_javascript.html')\n   .setCookie('atestcookie', 'foobar=baz')\n   .assert.cookie('atestcookie', 'foobar=baz')\n   .done();\n```",
            "api": "",
            "itemtype": "method",
            "name": "cookie",
            "params": [
                {
                    "name": "name",
                    "description": "Name of the cookie",
                    "type": "String"
                },
                {
                    "name": "expect",
                    "description": "Expected testresult",
                    "type": "String"
                },
                {
                    "name": "message",
                    "description": "Message for the test reporter",
                    "type": "String"
                }
            ],
            "chainable": 1,
            "class": "Dalek.Internal.Assertions",
            "module": "Assertions",
            "namespace": "Dalek.Internal"
        },
        {
            "file": "lib/dalek/assertions.js",
            "line": 786,
            "description": "Asserts that current HTTP status code is the same as the one passed as argument.\nTODO: Needs some work to be implement (maybe JavaScript, Webdriver ha no method for this)",
            "itemtype": "method",
            "name": "httpStatus",
            "params": [
                {
                    "name": "status",
                    "description": "HTTP status code",
                    "type": "Integer"
                },
                {
                    "name": "message",
                    "description": "Message for the test reporter",
                    "type": "String"
                }
            ],
            "chainable": 1,
            "class": "Dalek.Internal.Assertions",
            "module": "Assertions",
            "namespace": "Dalek.Internal"
        },
        {
            "file": "lib/dalek/assertions.js",
            "line": 803,
            "description": "Asserts that an element matching the provided selector expression exists in remote DOM environment.\n\n```html\n<body>\n  <p id=\"so-lonely\">Last of the timelords</p>\n</body>\n```\n\n```javascript\ntest\n  .open('http://doctor.thedoctor.com/doctor')\n  .assert.exists('#so-lonely', 'The loneliest element in the universe exists')\n  .done()\n```",
            "api": "",
            "itemtype": "method",
            "name": "exists",
            "params": [
                {
                    "name": "selector",
                    "description": "Selector that matches the elements to test",
                    "type": "String"
                },
                {
                    "name": "message",
                    "description": "Message for the test reporter",
                    "type": "String"
                }
            ],
            "chainable": 1,
            "class": "Dalek.Internal.Assertions",
            "module": "Assertions",
            "namespace": "Dalek.Internal"
        },
        {
            "file": "lib/dalek/assertions.js",
            "line": 839,
            "description": "Asserts that an element matching the provided selector expression doesnʼt\nexists within the remote DOM environment.\n\n```html\n<body>\n  <p id=\"so-lonely\">Last of the time lords</p>\n</body>\n```\n\n```javascript\ntest\n  .open('http://doctor.thedoctor.com/doctor')\n  .assert.doesntExist('#the-master', 'The master element has not been seen')\n  .done();\n```",
            "api": "",
            "itemtype": "method",
            "name": "doesntExist",
            "params": [
                {
                    "name": "selector",
                    "description": "Selector that matches the elements to test",
                    "type": "String"
                },
                {
                    "name": "message",
                    "description": "Message for the test reporter",
                    "type": "String"
                }
            ],
            "chainable": 1,
            "class": "Dalek.Internal.Assertions",
            "module": "Assertions",
            "namespace": "Dalek.Internal"
        },
        {
            "file": "lib/dalek/assertions.js",
            "line": 876,
            "description": "Asserts that the element matching the provided selector expression is not visible.\n\n```html\n<body>\n  <h1 style=\"display: none\">Me? So hidden …</h1>\n  <h2>Me? So in viewport...</h2>\n</body>\n```\n\n```javascript\n test\n   .open('http://allyourviewportsbelongto.us')\n   .assert.notVisible('h1', 'Element is not visible')\n   .done();\n```\n\n\n> NOTE: Buggy on all browsers",
            "api": "",
            "itemtype": "method",
            "name": "notVisible",
            "params": [
                {
                    "name": "selector",
                    "description": "Selector that matches the elements to test",
                    "type": "String"
                },
                {
                    "name": "message",
                    "description": "Message for the test reporter",
                    "type": "String"
                }
            ],
            "chainable": 1,
            "class": "Dalek.Internal.Assertions",
            "module": "Assertions",
            "namespace": "Dalek.Internal"
        },
        {
            "file": "lib/dalek/assertions.js",
            "line": 916,
            "description": "Asserts that the element matching the provided selector expression is visible.\n\n```html\n<body>\n  <h1>Me? So in viewport …</h1>\n</body>\n```\n\n```javascript\n test\n   .open('http://allyourviewportsbelongto.us')\n   .assert.visible('h1', 'Element is visible')\n   .done();\n```\n\n> NOTE: Buggy on all browsers",
            "api": "",
            "itemtype": "method",
            "name": "visible",
            "params": [
                {
                    "name": "selector",
                    "description": "Selector that matches the elements to test",
                    "type": "String"
                },
                {
                    "name": "message",
                    "description": "Message for the test reporter",
                    "type": "String"
                }
            ],
            "chainable": 1,
            "class": "Dalek.Internal.Assertions",
            "module": "Assertions",
            "namespace": "Dalek.Internal"
        },
        {
            "file": "lib/dalek/assertions.js",
            "line": 954,
            "description": "Asserts that given text does not exist in the provided selector.\n\n```html\n<body>\n  <h1>This is a CasperJS sandbox</h1>\n</body>\n```\n\n```javascript\n test\n   .open('http://dalekjs.com/guineapig/')\n   .assert.doesntHaveText('h1', 'This page is a Dalek sandbox', 'It´s a sandbox!')\n   .done();\n```\n\n> NOTE: You cant match for a substring with contain() here.",
            "api": "",
            "itemtype": "method",
            "name": "doesntHaveText",
            "params": [
                {
                    "name": "selector",
                    "description": "Selector that matches the elements to test",
                    "type": "String"
                },
                {
                    "name": "expected",
                    "description": "Expected test result",
                    "type": "String"
                },
                {
                    "name": "message",
                    "description": "Message for the test reporter",
                    "type": "String"
                }
            ],
            "chainable": 1,
            "class": "Dalek.Internal.Assertions",
            "module": "Assertions",
            "namespace": "Dalek.Internal"
        },
        {
            "file": "lib/dalek/assertions.js",
            "line": 993,
            "description": "Asserts that given text does not exist in the current alert/prompt/confirm dialog.\n\n```html\n<a href=\"#\" id=\"alert_confirm\" onclick=\"confirm('Confirm me!')\">I make confirm</a>\n```\n\n```javascript\n test\n   .open('http://skaaro.com/index.html')\n   .click('#alert_confirm')\n   .assert.dialogDoesntHaveText('I am an alert')\n   .accept()\n   .done();\n```\n\n> NOTE: You cant match for a substring with contain() here.\n> NOTE: Does not work in Firefox & PhantomJS",
            "api": "",
            "itemtype": "method",
            "name": "dialogDoesntHaveText",
            "params": [
                {
                    "name": "expected",
                    "description": "Expected test result",
                    "type": "String"
                },
                {
                    "name": "message",
                    "description": "Message for the test reporter",
                    "type": "String"
                }
            ],
            "chainable": 1,
            "class": "Dalek.Internal.Assertions",
            "module": "Assertions",
            "namespace": "Dalek.Internal"
        },
        {
            "file": "lib/dalek/assertions.js",
            "line": 1026,
            "description": "Asserts that given text does exist in the provided selector.\n\n```html\n<body>\n  <h1>This is a Dalek sandbox</h1>\n</body>\n```\n\n```javascript\n test\n   .open('http://dalekjs.com/guineapig/')\n   .assert.text('h1', 'This page is a Dalek sandbox', 'Exterminate!')\n   .done();\n```\n\nof course, text works also with the assertion helpers is() and not()\n\n```javascript\n test\n   .open('http://dalekjs.com/guineapig/')\n   .assert.text('h1').is('This page is a Dalek sandbox', 'Exterminate!')\n   .done();\n```\n\n```javascript\n test\n   .open('http://dalekjs.com/guineapig/')\n   .assert.text('h1').is.not('This page is a CasperJS sandbox', 'Exterminate!')\n   .done();\n```\n\nand you can also check for the occurrence of a substring with to.contain() (but don't try to chain it with not() as this is not possible)\n\n```javascript\n test\n   .open('http://dalekjs.com/guineapig/')\n   .assert.text('h1').to.contain('CasperJS')\n   .done();\n```",
            "api": "",
            "itemtype": "method",
            "name": "text",
            "params": [
                {
                    "name": "selector",
                    "description": "Selector that matches the elements to test",
                    "type": "String"
                },
                {
                    "name": "expected",
                    "description": "Expected test result",
                    "type": "String"
                },
                {
                    "name": "message",
                    "description": "Message for the test reporter",
                    "type": "String"
                }
            ],
            "chainable": 1,
            "class": "Dalek.Internal.Assertions",
            "module": "Assertions",
            "namespace": "Dalek.Internal"
        },
        {
            "file": "lib/dalek/assertions.js",
            "line": 1088,
            "description": "Asserts that given alertText does exist in the provided alert/confirm or prompt dialog.\n\n```html\n<a href=\"#\" id=\"alert\" onclick=\"alert('I am an alert')\">I make alerts!</a>\n```\n\n```javascript\n test\n   .open('http://skaaro.com/index.html')\n   .click('#alert_confirm')\n   .assert.dialogText('I am an alert')\n   .accept()\n   .done();\n```\n\nof course, text works also with the assertion helpers is() and not()\n\n```javascript\n test\n   .open('http://dalekjs.com/guineapig/')\n   .assert.dialogText().is('I am an alert', 'Exterminate!')\n   .done();\n```\n\n```javascript\n test\n   .open('http://dalekjs.com/guineapig/')\n   .assert.dialogText().is.not('I am an prompt', 'Exterminate!')\n   .done();\n```\n\n\n> NOTE: Does not work in Firefox & PhantomJS",
            "api": "",
            "itemtype": "method",
            "name": "dialogText",
            "params": [
                {
                    "name": "expected",
                    "description": "Expected testresult",
                    "type": "String"
                },
                {
                    "name": "message",
                    "description": "Message for the test reporter",
                    "type": "String"
                }
            ],
            "chainable": 1,
            "class": "Dalek.Internal.Assertions",
            "module": "Assertions",
            "namespace": "Dalek.Internal"
        },
        {
            "file": "lib/dalek/assertions.js",
            "line": 1137,
            "description": "Asserts that the page title is as expected.\n\n```javascript\n  test.open('http://doctorwhotv.co.uk/')\n    .assert.title('Doctor Who TV', 'Not your Daleks TV')\n    .done();\n```\n\nYep, using assertion helpers is also possible:\n\n```javascript\n  test.open('http://doctorwhotv.co.uk/')\n    .assert.title().is('Doctor Who TV', 'Not your Daleks TV')\n    .done();\n```\n\nthe not() helper is available too:\n\n```javascript\n  test.open('http://doctorwhotv.co.uk/')\n    .assert.title().is.not('Dalek Emperor TV', 'Not your Daleks TV')\n    .done();\n```\n\nand you can also match for a substring with to.contain() (but don't try to chain it with not() as this is not possible):\n\n```javascript\n  test.open('http://doctorwhotv.co.uk/')\n    .assert.title().to.contain('Emperor')\n    .done();\n```",
            "api": "",
            "itemtype": "method",
            "name": "title",
            "params": [
                {
                    "name": "expected",
                    "description": "Expected test result",
                    "type": "String"
                },
                {
                    "name": "message",
                    "description": "Message for the test reporter",
                    "type": "String"
                }
            ],
            "chainable": 1,
            "class": "Dalek.Internal.Assertions",
            "module": "Assertions",
            "namespace": "Dalek.Internal"
        },
        {
            "file": "lib/dalek/assertions.js",
            "line": 1184,
            "description": "Asserts that given title does not match the given expectations.\n\n```javascript\n  test.open('http://doctorwhotv.co.uk/')\n    .assert.doesntHaveTitle('Dalek Emperor TV', 'Not your Daleks TV')\n    .done();\n```",
            "api": "",
            "itemtype": "method",
            "name": "doesntHaveTitle",
            "params": [
                {
                    "name": "expected",
                    "description": "Expected test result",
                    "type": "String"
                },
                {
                    "name": "message",
                    "description": "Message for the test reporter",
                    "type": "String"
                }
            ],
            "chainable": 1,
            "class": "Dalek.Internal.Assertions",
            "module": "Assertions",
            "namespace": "Dalek.Internal"
        },
        {
            "file": "lib/dalek/assertions.js",
            "line": 1207,
            "description": "Asserts that screenshot is equal to already stored image.\nShould follow only after screenshot action\n\n```javascript\n   test.open('http://google.com')\n     .wait(500)\n     .screenshot('test/screenshots/google.png','#lga')\n     .assert.screenshotIsEqualTo('test/screenshots/google_etalon.png', true, 'Google Doodles')\n     .done();\n```",
            "api": "",
            "itemtype": "method",
            "name": "doesntHaveTitle",
            "params": [
                {
                    "name": "expected",
                    "description": "Path to expected png image",
                    "type": "String"
                },
                {
                    "name": "do",
                    "description": "make diff image",
                    "type": "Boolean"
                },
                {
                    "name": "message",
                    "description": "Message for the test reporter",
                    "type": "String"
                }
            ],
            "chainable": 1,
            "class": "Dalek.Internal.Assertions",
            "module": "Assertions",
            "namespace": "Dalek.Internal"
        },
        {
            "file": "lib/dalek/assertions.js",
            "line": 1246,
            "description": "Asserts that the page’s url is as expected.\n\n```javascript\n  test.open('http://doctorwhotv.co.uk/')\n    .assert.url('http://doctorwhotv.co.uk/', 'URL is as expected')\n    .done();\n```\n\nYou can also check if the protocol changed,\nnice to see when you open GitHub with 'http' instead of 'https'\n\n```javascript\n  test.open('http://github.com')\n    .assert.url('https://github.com/', 'Changed prototcols')\n    .done();\n```\n\nYep, using assertion helpers is also possible:\n\n```javascript\n  test.open('http://github.com')\n    .assert.url().is('http://doctorwhotv.co.uk/', 'URL is as expected')\n    .done();\n```\n\nthe not() helper is available too:\n\n```javascript\n  test.open('http://doctorwhotv.co.uk/')\n    .assert.url().is.not('http://doctorwhotv.co.uk/', 'URL is as expected')\n    .done();\n```\n\nand you can also match for a substring with to.contain() (but don't try to chain it with not() as this is not possible):\n\n```javascript\n  test.open('http://doctorwhotv.co.uk/')\n    .assert.url().to.contain('doctor')\n    .done();\n```",
            "api": "",
            "itemtype": "method",
            "name": "url",
            "params": [
                {
                    "name": "expected",
                    "description": "Expected test result",
                    "type": "String"
                },
                {
                    "name": "message",
                    "description": "Message for the test reporter",
                    "type": "String"
                }
            ],
            "chainable": 1,
            "class": "Dalek.Internal.Assertions",
            "module": "Assertions",
            "namespace": "Dalek.Internal"
        },
        {
            "file": "lib/dalek/assertions.js",
            "line": 1302,
            "description": "Asserts that the pages URL does not match the expectation.\n\n```javascript\n  test.open('http://doctorwhotv.co.uk/')\n    .assert.doesntHaveUrl('http://doctorwhotv.co.uk/', 'URL is not expected')\n    .done();\n```\n\nOh, you might also match for a substring with to.contain():\n\n * ```javascript\n  test.open('http://doctorwhotv.co.uk/')\n    .assert.doesntHaveUrl().to.contain('doctor')\n    .done();\n```",
            "api": "",
            "itemtype": "method",
            "name": "doesntHaveUrl",
            "params": [
                {
                    "name": "expected",
                    "description": "Expected test result",
                    "type": "String"
                },
                {
                    "name": "message",
                    "description": "Message for the test reporter",
                    "type": "String"
                }
            ],
            "chainable": 1,
            "class": "Dalek.Internal.Assertions",
            "module": "Assertions",
            "namespace": "Dalek.Internal"
        },
        {
            "file": "lib/dalek/assertions.js",
            "line": 1333,
            "description": "Asserts that an elements attribute is as expected.\n\n```html\n<form>\n  <button class=\"jumpButton\" type=\"submit\">Fire</button>\n</form>\n```\n\n```javascript\n test\n   .open('http://dalekjs.com/guineapig/')\n   .assert.attr('.jumpButton', 'type', 'submit')\n   .done();\n```\n\n```html\n<div class=\"wellImUpperUpperClassHighSociety\" id=\"dataDiv\" data-spot=\"cat\"></div>\n```\n\n```javascript\n test\n   .open('http://dalekjs.com/guineapig/')\n   .assert.attr('#dataDiv').is('data-spot', 'cat', 'We found Dataʼs cat!')\n   .done();\n```\n\n```javascript\n test\n   .open('http://dalekjs.com/guineapig/')\n   .assert.attr('#dataDiv').is.not('data-spot', 'doc', 'Spot is not a dog!')\n   .done();\n```\n\nYou can also use attr() for checking if a class is existent\n\n```javascript\n test\n   .open('http://dalekjs.com/guineapig/')\n   .assert.attr('#dataDiv', 'class', 'wellImUpperUpperClassHighSociety')\n   .done();\n```\n\nand you can also match a substring (e. g. a single class if more classes are on that elem) with to.contain():\n\n```javascript\n test\n   .open('http://dalekjs.com/guineapig/')\n   .assert.attr('#dataDiv', 'class').to.contain('upperUpperClass')\n   .done();\n```",
            "api": "",
            "itemtype": "method",
            "name": "attr",
            "params": [
                {
                    "name": "selector",
                    "description": "Selector that matches the elements to test",
                    "type": "String"
                },
                {
                    "name": "attribute",
                    "description": "The attribute to test",
                    "type": "String"
                },
                {
                    "name": "expected",
                    "description": "Expected test result",
                    "type": "String"
                },
                {
                    "name": "message",
                    "description": "Message for the test reporter",
                    "type": "String"
                }
            ],
            "chainable": 1,
            "class": "Dalek.Internal.Assertions",
            "module": "Assertions",
            "namespace": "Dalek.Internal"
        },
        {
            "file": "lib/dalek/assertions.js",
            "line": 1410,
            "description": "Assert result of the execution of JavaScript function within the browser context.\n  \n  test\n    .open('http://dalekjs.com/index.html')\n    .assert.evaluate(function () {\n      return document.getElementsByClassName('grid').length;\n    }).is(2, 'Count of grid on page is equal 2');\n\n* > Note: Buggy in Firefox\n*\n* @api\n* @method execute\n* @param {function} script JavaScript function that should be executed\n* @return chainable",
            "class": "Dalek.Internal.Assertions",
            "module": "Assertions",
            "namespace": "Dalek.Internal"
        },
        {
            "file": "lib/dalek/assertions.js",
            "line": 1440,
            "description": "Is helper",
            "itemtype": "method",
            "name": "is",
            "params": [
                {
                    "name": "expected",
                    "description": "Value to check",
                    "type": "Mixed"
                },
                {
                    "name": "message",
                    "description": "Test message",
                    "type": "String"
                }
            ],
            "chainable": 1,
            "class": "Dalek.Internal.Assertions",
            "module": "Assertions",
            "namespace": "Dalek.Internal"
        },
        {
            "file": "lib/dalek/assertions.js",
            "line": 1453,
            "description": "Not helper",
            "itemtype": "method",
            "name": "not",
            "params": [
                {
                    "name": "expected",
                    "description": "Value to check",
                    "type": "Mixed"
                },
                {
                    "name": "message",
                    "description": "Test message",
                    "type": "String"
                }
            ],
            "chainable": 1,
            "class": "Dalek.Internal.Assertions",
            "module": "Assertions",
            "namespace": "Dalek.Internal"
        },
        {
            "file": "lib/dalek/assertions.js",
            "line": 1466,
            "description": "Between helper",
            "itemtype": "method",
            "name": "between",
            "params": [
                {
                    "name": "expected",
                    "description": "Value to check",
                    "type": "Mixed"
                },
                {
                    "name": "message",
                    "description": "Test message",
                    "type": "String"
                }
            ],
            "chainable": 1,
            "class": "Dalek.Internal.Assertions",
            "module": "Assertions",
            "namespace": "Dalek.Internal"
        },
        {
            "file": "lib/dalek/assertions.js",
            "line": 1479,
            "description": "Gt helper",
            "itemtype": "method",
            "name": "gt",
            "params": [
                {
                    "name": "expected",
                    "description": "Value to check",
                    "type": "Mixed"
                },
                {
                    "name": "message",
                    "description": "Test message",
                    "type": "String"
                }
            ],
            "chainable": 1,
            "class": "Dalek.Internal.Assertions",
            "module": "Assertions",
            "namespace": "Dalek.Internal"
        },
        {
            "file": "lib/dalek/assertions.js",
            "line": 1492,
            "description": "Gte helper",
            "itemtype": "method",
            "name": "gte",
            "params": [
                {
                    "name": "expected",
                    "description": "Value to check",
                    "type": "Mixed"
                },
                {
                    "name": "message",
                    "description": "Test message",
                    "type": "String"
                }
            ],
            "chainable": 1,
            "class": "Dalek.Internal.Assertions",
            "module": "Assertions",
            "namespace": "Dalek.Internal"
        },
        {
            "file": "lib/dalek/assertions.js",
            "line": 1505,
            "description": "Lt helper",
            "itemtype": "method",
            "name": "lt",
            "params": [
                {
                    "name": "expected",
                    "description": "Value to check",
                    "type": "Mixed"
                },
                {
                    "name": "message",
                    "description": "Test message",
                    "type": "String"
                }
            ],
            "chainable": 1,
            "class": "Dalek.Internal.Assertions",
            "module": "Assertions",
            "namespace": "Dalek.Internal"
        },
        {
            "file": "lib/dalek/assertions.js",
            "line": 1518,
            "description": "Lte helper",
            "itemtype": "method",
            "name": "lte",
            "params": [
                {
                    "name": "expected",
                    "description": "Value to check",
                    "type": "Mixed"
                },
                {
                    "name": "message",
                    "description": "Test message",
                    "type": "String"
                }
            ],
            "chainable": 1,
            "class": "Dalek.Internal.Assertions",
            "module": "Assertions",
            "namespace": "Dalek.Internal"
        },
        {
            "file": "lib/dalek/assertions.js",
            "line": 1531,
            "description": "Contain helper",
            "itemtype": "method",
            "name": "contain",
            "params": [
                {
                    "name": "expected",
                    "description": "Value to check",
                    "type": "Mixed"
                },
                {
                    "name": "message",
                    "description": "Test message",
                    "type": "String"
                }
            ],
            "chainable": 1,
            "class": "Dalek.Internal.Assertions",
            "module": "Assertions",
            "namespace": "Dalek.Internal"
        },
        {
            "file": "lib/dalek/assertions.js",
            "line": 1544,
            "description": "Not contain helper",
            "itemtype": "method",
            "name": "notContain",
            "params": [
                {
                    "name": "expected",
                    "description": "Value to check",
                    "type": "Mixed"
                },
                {
                    "name": "message",
                    "description": "Test message",
                    "type": "String"
                }
            ],
            "chainable": 1,
            "class": "Dalek.Internal.Assertions",
            "module": "Assertions",
            "namespace": "Dalek.Internal"
        },
        {
            "file": "lib/dalek/assertions.js",
            "line": 1557,
            "description": "Match helper",
            "itemtype": "method",
            "name": "match",
            "params": [
                {
                    "name": "expected",
                    "description": "Regex to match on",
                    "type": "String"
                },
                {
                    "name": "message",
                    "description": "Test message",
                    "type": "String"
                }
            ],
            "chainable": 1,
            "class": "Dalek.Internal.Assertions",
            "module": "Assertions",
            "namespace": "Dalek.Internal"
        },
        {
            "file": "lib/dalek/assertions.js",
            "line": 1570,
            "description": "Equals case insensitive helper",
            "itemtype": "method",
            "name": "equalsCaseInsensitive",
            "params": [
                {
                    "name": "expected",
                    "description": "Value to check",
                    "type": "Mixed"
                },
                {
                    "name": "message",
                    "description": "Test message",
                    "type": "String"
                }
            ],
            "chainable": 1,
            "class": "Dalek.Internal.Assertions",
            "module": "Assertions",
            "namespace": "Dalek.Internal"
        },
        {
            "file": "lib/dalek/assertions.js",
            "line": 1586,
            "description": "Generates a callback that will be fired when the action has been completed.\nThe callback itself will then validate the answer and will also emit an event\nthat the action has been successfully executed.",
            "itemtype": "method",
            "name": "_generateCallbackAssertion",
            "params": [
                {
                    "name": "key",
                    "description": "Unique key of the action",
                    "type": "String"
                },
                {
                    "name": "type",
                    "description": "Type of the action (usually the actions name)",
                    "type": "String"
                },
                {
                    "name": "test",
                    "description": "test method to be used",
                    "type": "String"
                },
                {
                    "name": "hash",
                    "description": "the uuid",
                    "type": "String"
                },
                {
                    "name": "opts",
                    "description": "the options object",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The generated callback function",
                "type": "Function"
            },
            "access": "private",
            "tagname": "",
            "class": "Dalek.Internal.Assertions",
            "module": "Assertions",
            "namespace": "Dalek.Internal"
        },
        {
            "file": "lib/dalek/assertions.js",
            "line": 1633,
            "description": "Adds a method to the queue of actions/assertions to execute",
            "itemtype": "method",
            "name": "_addToActionQueue",
            "params": [
                {
                    "name": "opts",
                    "description": "Options of the action to invoke",
                    "type": "Object"
                },
                {
                    "name": "driverMethod",
                    "description": "Name of the method to call on the driver",
                    "type": "String"
                },
                {
                    "name": "A",
                    "description": "callback function that will be executed when the action has been executed",
                    "type": "Function"
                }
            ],
            "access": "private",
            "tagname": "",
            "chainable": 1,
            "class": "Dalek.Internal.Assertions",
            "module": "Assertions",
            "namespace": "Dalek.Internal"
        },
        {
            "file": "lib/dalek/assertions.js",
            "line": 1656,
            "description": "Generates a function that can be used",
            "itemtype": "method",
            "name": "generateTestHelper",
            "params": [
                {
                    "name": "name",
                    "description": ""
                },
                {
                    "name": "assertionFn",
                    "description": ""
                },
                {
                    "name": "negate",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "access": "private",
            "tagname": "",
            "class": "Dalek.Internal.Assertions",
            "module": "Assertions",
            "namespace": "Dalek.Internal"
        },
        {
            "file": "lib/dalek/assertions.js",
            "line": 1712,
            "description": "Assert if a given value shallow equals a second given value",
            "itemtype": "method",
            "name": "_testShallowEquals",
            "params": [
                {
                    "name": "a",
                    "description": "Value to test",
                    "type": "Mixed"
                },
                {
                    "name": "b",
                    "description": "Value to test",
                    "type": "Mixed"
                }
            ],
            "return": {
                "description": "false if values donʼt match, true if they match",
                "type": "Bool"
            },
            "access": "private",
            "tagname": "",
            "class": "Dalek.Internal.Assertions",
            "module": "Assertions",
            "namespace": "Dalek.Internal"
        },
        {
            "file": "lib/dalek/assertions.js",
            "line": 1732,
            "description": "Assert if a given value shallow does not equal a second given value",
            "itemtype": "method",
            "name": "_testShallowUnequals",
            "params": [
                {
                    "name": "a",
                    "description": "Value to test",
                    "type": "Mixed"
                },
                {
                    "name": "b",
                    "description": "Value to test",
                    "type": "Mixed"
                }
            ],
            "return": {
                "description": "true if values donʼt match, false if they match",
                "type": "Bool"
            },
            "access": "private",
            "tagname": "",
            "class": "Dalek.Internal.Assertions",
            "module": "Assertions",
            "namespace": "Dalek.Internal"
        },
        {
            "file": "lib/dalek/assertions.js",
            "line": 1752,
            "description": "Assert if a given value matches a range",
            "itemtype": "method",
            "name": "_testBetween",
            "params": [
                {
                    "name": "a",
                    "description": "Range to test",
                    "type": "Array"
                },
                {
                    "name": "b",
                    "description": "Value to compare",
                    "type": "Bool"
                }
            ],
            "return": {
                "description": "test result",
                "type": "Bool"
            },
            "access": "private",
            "tagname": "",
            "class": "Dalek.Internal.Assertions",
            "module": "Assertions",
            "namespace": "Dalek.Internal"
        },
        {
            "file": "lib/dalek/assertions.js",
            "line": 1772,
            "description": "Assert if a given value is greater than the value to compare",
            "itemtype": "method",
            "name": "_testGreaterThan",
            "params": [
                {
                    "name": "a",
                    "description": "Value to test",
                    "type": "Bool"
                },
                {
                    "name": "b",
                    "description": "Value to compare",
                    "type": "Bool"
                },
                {
                    "name": "b",
                    "description": "Whether to apply parseFloat to both values prior comparision",
                    "type": "ParseFloatOnValues"
                }
            ],
            "return": {
                "description": "test result",
                "type": "Bool"
            },
            "access": "private",
            "tagname": "",
            "class": "Dalek.Internal.Assertions",
            "module": "Assertions",
            "namespace": "Dalek.Internal"
        },
        {
            "file": "lib/dalek/assertions.js",
            "line": 1798,
            "description": "Assert if a given value is greater or equal than the value to compare",
            "itemtype": "method",
            "name": "_testGreaterThanEqual",
            "params": [
                {
                    "name": "a",
                    "description": "Value to test",
                    "type": "Bool"
                },
                {
                    "name": "b",
                    "description": "Value to compare",
                    "type": "Bool"
                }
            ],
            "return": {
                "description": "test result",
                "type": "Bool"
            },
            "access": "private",
            "tagname": "",
            "class": "Dalek.Internal.Assertions",
            "module": "Assertions",
            "namespace": "Dalek.Internal"
        },
        {
            "file": "lib/dalek/assertions.js",
            "line": 1812,
            "description": "Assert if a given value is lower than the value to compare",
            "itemtype": "method",
            "name": "_testLowerThan",
            "params": [
                {
                    "name": "a",
                    "description": "Value to test",
                    "type": "Bool"
                },
                {
                    "name": "b",
                    "description": "Value to compare",
                    "type": "Bool"
                },
                {
                    "name": "b",
                    "description": "Whether to apply parseFloatOnValues to both values prior comparision",
                    "type": "ParseFloatOnValues"
                }
            ],
            "return": {
                "description": "test result",
                "type": "Bool"
            },
            "access": "private",
            "tagname": "",
            "class": "Dalek.Internal.Assertions",
            "module": "Assertions",
            "namespace": "Dalek.Internal"
        },
        {
            "file": "lib/dalek/assertions.js",
            "line": 1838,
            "description": "Asserts that 2 string match regardless of case",
            "itemtype": "method",
            "name": "_caseInsensitiveMatch",
            "params": [
                {
                    "name": "a",
                    "description": "Value to test",
                    "type": "String"
                },
                {
                    "name": "b",
                    "description": "Value to compare",
                    "type": "String"
                }
            ],
            "return": {
                "description": "testresult",
                "type": "Bool"
            },
            "access": "private",
            "tagname": "",
            "class": "Dalek.Internal.Assertions",
            "module": "Assertions",
            "namespace": "Dalek.Internal"
        },
        {
            "file": "lib/dalek/assertions.js",
            "line": 1862,
            "description": "Assert if a given value contain another value",
            "itemtype": "method",
            "name": "_contain",
            "params": [
                {
                    "name": "a",
                    "description": "Value to test",
                    "type": "Bool"
                },
                {
                    "name": "b",
                    "description": "Value to compare",
                    "type": "Bool"
                }
            ],
            "return": {
                "description": "test result",
                "type": "Bool"
            },
            "access": "private",
            "tagname": "",
            "class": "Dalek.Internal.Assertions",
            "module": "Assertions",
            "namespace": "Dalek.Internal"
        },
        {
            "file": "lib/dalek/assertions.js",
            "line": 1882,
            "description": "Assert if a given value doesn't contain another value",
            "itemtype": "method",
            "name": "_notContain",
            "params": [
                {
                    "name": "a",
                    "description": "Value to test",
                    "type": "Bool"
                },
                {
                    "name": "b",
                    "description": "Value to compare",
                    "type": "Bool"
                }
            ],
            "return": {
                "description": "test result",
                "type": "Bool"
            },
            "access": "private",
            "tagname": "",
            "class": "Dalek.Internal.Assertions",
            "module": "Assertions",
            "namespace": "Dalek.Internal"
        },
        {
            "file": "lib/dalek/assertions.js",
            "line": 1901,
            "description": "Assert if a given value is lower or equal than the value to compare",
            "itemtype": "method",
            "name": "_testLowerThanEqual",
            "params": [
                {
                    "name": "a",
                    "description": "Value to test",
                    "type": "Bool"
                },
                {
                    "name": "b",
                    "description": "Value to compare",
                    "type": "Bool"
                }
            ],
            "return": {
                "description": "test result",
                "type": "Bool"
            },
            "access": "private",
            "tagname": "",
            "class": "Dalek.Internal.Assertions",
            "module": "Assertions",
            "namespace": "Dalek.Internal"
        },
        {
            "file": "lib/dalek/assertions.js",
            "line": 1915,
            "description": "Assert if a given value is boolean 'true'",
            "itemtype": "method",
            "name": "_testTruthy",
            "params": [
                {
                    "name": "a",
                    "description": "Value to test",
                    "type": "Bool"
                }
            ],
            "return": {
                "description": "false if value is false, true if value is true",
                "type": "Bool"
            },
            "access": "private",
            "tagname": "",
            "class": "Dalek.Internal.Assertions",
            "module": "Assertions",
            "namespace": "Dalek.Internal"
        },
        {
            "file": "lib/dalek/assertions.js",
            "line": 1928,
            "description": "Assert if a given value is boolean 'false'",
            "itemtype": "method",
            "name": "_testFalsy",
            "params": [
                {
                    "name": "a",
                    "description": "Value to test",
                    "type": "Bool"
                }
            ],
            "return": {
                "description": "true if value is false, false if value is true",
                "type": "Bool"
            },
            "access": "private",
            "tagname": "",
            "class": "Dalek.Internal.Assertions",
            "module": "Assertions",
            "namespace": "Dalek.Internal"
        },
        {
            "file": "lib/dalek/assertions.js",
            "line": 1941,
            "description": "Assert a given value matches a RegEx",
            "itemtype": "method",
            "name": "_contain",
            "params": [
                {
                    "name": "a",
                    "description": "Value to test",
                    "type": "Mixed"
                },
                {
                    "name": "b",
                    "description": "Value to compare",
                    "type": "String"
                }
            ],
            "return": {
                "description": "test result",
                "type": "Bool"
            },
            "access": "private",
            "tagname": "",
            "class": "Dalek.Internal.Assertions",
            "module": "Assertions",
            "namespace": "Dalek.Internal"
        },
        {
            "file": "lib/dalek/assertions.js",
            "line": 1962,
            "description": "Assert if a image compare result is equal",
            "itemtype": "method",
            "name": "_testImagecompare",
            "params": [
                {
                    "name": "a",
                    "description": "Value to test if it equal to 'equal'",
                    "type": "String"
                }
            ],
            "return": {
                "description": "true if value is 'equal', false if value has some other values",
                "type": "Bool"
            },
            "access": "private",
            "tagname": "",
            "class": "Dalek.Internal.Assertions",
            "module": "Assertions",
            "namespace": "Dalek.Internal"
        },
        {
            "file": "lib/dalek/config.js",
            "line": 36,
            "description": "Configures the config instance",
            "params": [
                {
                    "name": "defaults",
                    "description": "Default parameter options",
                    "type": "Object"
                },
                {
                    "name": "opts",
                    "description": "Command line options",
                    "type": "Object"
                }
            ],
            "is_constructor": 1,
            "class": "Dalek.Config",
            "module": "Assertions",
            "namespace": "Dalek.Internal"
        },
        {
            "file": "lib/dalek/config.js",
            "line": 143,
            "description": "Checks if a config file is available",
            "itemtype": "method",
            "name": "checkAvailabilityOfConfigFile",
            "params": [
                {
                    "name": "pathname",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "config File path",
                "type": "String"
            },
            "class": "Dalek.Config",
            "module": "DalekJS",
            "namespace": "Dalek"
        },
        {
            "file": "lib/dalek/config.js",
            "line": 162,
            "description": "Iterator function that checks the existance of a given file",
            "itemtype": "method",
            "name": "_checkFile",
            "params": [
                {
                    "name": "previousValue",
                    "description": "Last iterations result",
                    "type": "String"
                },
                {
                    "name": "ext",
                    "description": "File extension to check",
                    "type": "String"
                },
                {
                    "name": "idx",
                    "description": "Iteration index",
                    "type": "Integer"
                },
                {
                    "name": "data",
                    "description": "File data",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "config File path",
                "type": "String"
            },
            "access": "private",
            "tagname": "",
            "class": "Dalek.Config",
            "module": "DalekJS",
            "namespace": "Dalek"
        },
        {
            "file": "lib/dalek/config.js",
            "line": 187,
            "description": "Iterator function that checks the existance of a the default file",
            "itemtype": "method",
            "name": "_checkDefaultFile",
            "params": [
                {
                    "name": "ext",
                    "description": "File extension to check",
                    "type": "String"
                },
                {
                    "name": "data",
                    "description": "File data",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "config File path",
                "type": "String"
            },
            "access": "private",
            "tagname": "",
            "class": "Dalek.Config",
            "module": "DalekJS",
            "namespace": "Dalek"
        },
        {
            "file": "lib/dalek/config.js",
            "line": 208,
            "description": "Loads a file & merges the results with the\ncommandline options & the default config",
            "itemtype": "method",
            "name": "load",
            "params": [
                {
                    "name": "defaults",
                    "description": "Default config",
                    "type": "Object"
                },
                {
                    "name": "pathname",
                    "description": "Filename of the config file to load",
                    "type": "String"
                },
                {
                    "name": "opts",
                    "description": "Command line options",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "config Merged config data",
                "type": "Object"
            },
            "class": "Dalek.Config",
            "module": "DalekJS",
            "namespace": "Dalek"
        },
        {
            "file": "lib/dalek/config.js",
            "line": 251,
            "description": "Loads a config file & parses it based on the file extension",
            "itemtype": "method",
            "name": "loadFile",
            "params": [
                {
                    "name": "pathname",
                    "description": "Filename of the config file to load",
                    "type": "String"
                }
            ],
            "return": {
                "description": "data Config data",
                "type": "Object"
            },
            "class": "Dalek.Config",
            "module": "DalekJS",
            "namespace": "Dalek"
        },
        {
            "file": "lib/dalek/config.js",
            "line": 264,
            "description": "Fetches & returns a config item",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "item",
                    "description": "Key of the item to load",
                    "type": "String"
                }
            ],
            "return": {
                "description": "data Requested config data",
                "type": "Mixed|null"
            },
            "class": "Dalek.Config",
            "module": "DalekJS",
            "namespace": "Dalek"
        },
        {
            "file": "lib/dalek/config.js",
            "line": 276,
            "description": "Loads a json config file",
            "itemtype": "method",
            "name": "readjson",
            "return": {
                "description": "data Parsed config data",
                "type": "Object"
            },
            "class": "Dalek.Config",
            "module": "DalekJS",
            "namespace": "Dalek"
        },
        {
            "file": "lib/dalek/config.js",
            "line": 288,
            "description": "Loads a json5 config file",
            "itemtype": "method",
            "name": "readJson5",
            "return": {
                "description": "data Parsed config data",
                "type": "Object"
            },
            "class": "Dalek.Config",
            "module": "DalekJS",
            "namespace": "Dalek"
        },
        {
            "file": "lib/dalek/config.js",
            "line": 300,
            "description": "Loads a yaml config file",
            "itemtype": "method",
            "name": "readyaml",
            "return": {
                "description": "data Parsed config data",
                "type": "Object"
            },
            "class": "Dalek.Config",
            "module": "DalekJS",
            "namespace": "Dalek"
        },
        {
            "file": "lib/dalek/config.js",
            "line": 312,
            "description": "Loads a javascript config file",
            "itemtype": "method",
            "name": "readjs",
            "return": {
                "description": "data Parsed config data",
                "type": "Object"
            },
            "class": "Dalek.Config",
            "module": "DalekJS",
            "namespace": "Dalek"
        },
        {
            "file": "lib/dalek/config.js",
            "line": 323,
            "description": "Loads a coffescript config file",
            "itemtype": "method",
            "name": "readcoffee",
            "return": {
                "description": "data Parsed config data",
                "type": "Object"
            },
            "class": "Dalek.Config",
            "module": "DalekJS",
            "namespace": "Dalek"
        },
        {
            "file": "lib/dalek/config.js",
            "line": 334,
            "description": "Verifies if a reporter is given, exists & is valid",
            "itemtype": "method",
            "name": "verifyReporters",
            "return": {
                "description": "data List of verified reporters",
                "type": "Array"
            },
            "class": "Dalek.Config",
            "module": "DalekJS",
            "namespace": "Dalek"
        },
        {
            "file": "lib/dalek/config.js",
            "line": 345,
            "description": "Verifies if a driver is given, exists & is valid",
            "itemtype": "method",
            "name": "verifyDrivers",
            "return": {
                "description": "data List of verified drivers",
                "type": "Array"
            },
            "class": "Dalek.Config",
            "module": "DalekJS",
            "namespace": "Dalek"
        },
        {
            "file": "lib/dalek/config.js",
            "line": 356,
            "description": "Verifies if a driver is given, exists & is valid",
            "itemtype": "method",
            "name": "_verify",
            "params": [
                {
                    "name": "check",
                    "description": "Data that should be mapped",
                    "type": "Array"
                },
                {
                    "name": "fn",
                    "description": "Name of the function that should be invoked on the veryify object",
                    "type": "String"
                },
                {
                    "name": "instance",
                    "description": "Object instance where the verify function should be invoked",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "data List of verified items",
                "type": "Array"
            },
            "access": "private",
            "tagname": "",
            "class": "Dalek.Config",
            "module": "DalekJS",
            "namespace": "Dalek"
        },
        {
            "file": "lib/dalek/config.js",
            "line": 371,
            "description": "Verifies if a driver is given, exists & is valid",
            "itemtype": "method",
            "name": "_verifyIterator",
            "params": [
                {
                    "name": "fn",
                    "description": "Name of the function that should be invoked on the veryify object",
                    "type": "String"
                },
                {
                    "name": "instance",
                    "description": "Object instance where the verify function should be invoked",
                    "type": "Object"
                },
                {
                    "name": "elm",
                    "description": "Name of the element that should be checked",
                    "type": "String"
                }
            ],
            "return": {
                "description": "element name of the verified element or false if checked failed",
                "type": "String|null"
            },
            "priavte": "",
            "class": "Dalek.Config",
            "module": "DalekJS",
            "namespace": "Dalek"
        },
        {
            "file": "lib/dalek/driver.js",
            "line": 33,
            "description": "Configures the driver instance",
            "is_constructor": 1,
            "class": "Dalek.Driver",
            "module": "DalekJS",
            "namespace": "Dalek"
        },
        {
            "file": "lib/dalek/driver.js",
            "line": 67,
            "description": "Checks if the requested driver is available",
            "itemtype": "method",
            "name": "isDriver",
            "params": [
                {
                    "name": "driver",
                    "description": "Name of the requested driver",
                    "type": "String"
                }
            ],
            "return": {
                "description": "isDriver Driver is availavle",
                "type": "Bool"
            },
            "class": "Dalek.Driver",
            "module": "DalekJS",
            "namespace": "Dalek"
        },
        {
            "file": "lib/dalek/driver.js",
            "line": 90,
            "description": "Loads the requested driver\nEmits an event to the reporter",
            "itemtype": "method",
            "name": "loadDriver",
            "params": [
                {
                    "name": "driver",
                    "description": "Name of the requested driver",
                    "type": "String"
                }
            ],
            "return": {
                "description": "driverModule Instance of the driver module",
                "type": "Object"
            },
            "class": "Dalek.Driver",
            "module": "DalekJS",
            "namespace": "Dalek"
        },
        {
            "file": "lib/dalek/driver.js",
            "line": 104,
            "description": "Returns a list with browser driver instances",
            "itemtype": "method",
            "name": "getDrivers",
            "return": {
                "description": "verifiedDrivers",
                "type": "Array"
            },
            "class": "Dalek.Driver",
            "module": "DalekJS",
            "namespace": "Dalek"
        },
        {
            "file": "lib/dalek/driver.js",
            "line": 115,
            "description": "Returns a list with browser driver instances",
            "itemtype": "method",
            "name": "getVerifiedBrowser",
            "params": [
                {
                    "name": "driver",
                    "description": "Name of the requested driver",
                    "type": "String"
                }
            ],
            "return": {
                "description": "verifiedDrivers Array of dribver 'run' functions",
                "type": "Array"
            },
            "class": "Dalek.Driver",
            "module": "DalekJS",
            "namespace": "Dalek"
        },
        {
            "file": "lib/dalek/driver.js",
            "line": 127,
            "description": "Returns a scoped version of the driver run function",
            "itemtype": "method",
            "name": "getVerifiedDriver",
            "params": [
                {
                    "name": "driverModule",
                    "description": "Instance of the used driver",
                    "type": "Object"
                },
                {
                    "name": "driver",
                    "description": "Name of ther used driver",
                    "type": "String"
                },
                {
                    "name": "browser",
                    "description": "Name of the used browser",
                    "type": "String"
                }
            ],
            "return": {
                "description": "run Function that kicks off execution of a testsuite chain in a browser",
                "type": "Function"
            },
            "class": "Dalek.Driver",
            "module": "DalekJS",
            "namespace": "Dalek"
        },
        {
            "file": "lib/dalek/driver.js",
            "line": 141,
            "description": "Loads a browser driver",
            "itemtype": "method",
            "name": "loadBrowserConfiguration",
            "params": [
                {
                    "name": "browser",
                    "description": "Name of the requested browser driver",
                    "type": "String"
                },
                {
                    "name": "browsers",
                    "description": "Configuration options for the requested browser",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "browserConfiguration Browser driver isntance and configuration meta data",
                "type": "Object"
            },
            "class": "Dalek.Driver",
            "module": "DalekJS",
            "namespace": "Dalek"
        },
        {
            "file": "lib/dalek/driver.js",
            "line": 166,
            "description": "Loads the default browser driver",
            "itemtype": "method",
            "name": "getDefaultBrowserConfiguration",
            "params": [
                {
                    "name": "browser",
                    "description": "Name of the requested browser driver",
                    "type": "String"
                },
                {
                    "name": "browsers",
                    "description": "Configuration options for the requested browser",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "browserConfiguration Browser driver isntance and configuration meta data",
                "type": "Object"
            },
            "class": "Dalek.Driver",
            "module": "DalekJS",
            "namespace": "Dalek"
        },
        {
            "file": "lib/dalek/driver.js",
            "line": 200,
            "description": "Loads a user configured browser driver",
            "itemtype": "method",
            "name": "getUserBrowserConfiguration",
            "params": [
                {
                    "name": "browser",
                    "description": "Name of the requested browser driver",
                    "type": "String"
                },
                {
                    "name": "browsers",
                    "description": "Configuration options for the requested browser",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "browserConfiguration Browser driver isntance and configuration meta data",
                "type": "Object"
            },
            "class": "Dalek.Driver",
            "module": "DalekJS",
            "namespace": "Dalek"
        },
        {
            "file": "lib/dalek/driver.js",
            "line": 235,
            "description": "Couple driver & session status events for the reporter",
            "itemtype": "method",
            "name": "coupleReporterEvents",
            "params": [
                {
                    "name": "driverName",
                    "description": "Name of the requested driver",
                    "type": "String"
                },
                {
                    "name": "browser",
                    "description": "Name of the requested browser",
                    "type": "String"
                }
            ],
            "chainable": 1,
            "class": "Dalek.Driver",
            "module": "DalekJS",
            "namespace": "Dalek"
        },
        {
            "file": "lib/dalek/driver.js",
            "line": 250,
            "description": "Returns a list of testsuite runner functions",
            "itemtype": "method",
            "name": "getTestsuiteInstances",
            "params": [
                {
                    "name": "driverInstance",
                    "description": "Instance of the requested driver",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "testsuiteRunners List of testsuites that should be run",
                "type": "Array"
            },
            "class": "Dalek.Driver",
            "module": "DalekJS",
            "namespace": "Dalek"
        },
        {
            "file": "lib/dalek/driver.js",
            "line": 262,
            "description": "Creates a testsuite runner function",
            "itemtype": "method",
            "name": "createTestsuiteInstance",
            "params": [
                {
                    "name": "driverInstance",
                    "description": "Instance of the requested driver",
                    "type": "Object"
                },
                {
                    "name": "file",
                    "description": "Filename of the testsuite",
                    "type": "String"
                }
            ],
            "return": {
                "description": "testsuiteRunner Runner function from the testsuite",
                "type": "Function"
            },
            "class": "Dalek.Driver",
            "module": "DalekJS",
            "namespace": "Dalek"
        },
        {
            "file": "lib/dalek/driver.js",
            "line": 276,
            "description": "Generates a testsuite instance, emits the\nbrowser running event & starts a new async() sesries execution\nWill be called when the driver is ready",
            "itemtype": "method",
            "name": "_onDriverReady",
            "params": [
                {
                    "name": "browser",
                    "description": "Name of the requested browser",
                    "type": "String"
                },
                {
                    "name": "driverName",
                    "description": "Name of the requested driver",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "Asyncs next() callback function",
                    "type": "Function"
                },
                {
                    "name": "driverInstance",
                    "description": "Instance of the requested driver",
                    "type": "Object"
                }
            ],
            "chainable": 1,
            "access": "private",
            "tagname": "",
            "class": "Dalek.Driver",
            "module": "DalekJS",
            "namespace": "Dalek"
        },
        {
            "file": "lib/dalek/driver.js",
            "line": 298,
            "description": "Emits a 'tests complete' event & calls async's next() callback",
            "itemtype": "method",
            "name": "_onTestsuiteComplete",
            "params": [
                {
                    "name": "callback",
                    "description": "Async's next() callback function",
                    "type": "Function"
                },
                {
                    "name": "driverName",
                    "description": "Name of the requested driver",
                    "type": "String"
                },
                {
                    "name": "browser",
                    "description": "Name of the requested browser",
                    "type": "String"
                }
            ],
            "chainable": 1,
            "access": "private",
            "tagname": "",
            "class": "Dalek.Driver",
            "module": "DalekJS",
            "namespace": "Dalek"
        },
        {
            "file": "lib/dalek/driver.js",
            "line": 315,
            "description": "Driver runner function.\nRegisters event handlers for this run,\nloads browser & driver configuration & instances,\nemits the 'driver ready' event for the browser/driver combination",
            "itemtype": "method",
            "name": "run",
            "params": [
                {
                    "name": "driverName",
                    "description": "Name of the requested driver",
                    "type": "String"
                },
                {
                    "name": "driverModule",
                    "description": "Instance of the used driver module",
                    "type": "Object"
                },
                {
                    "name": "browser",
                    "description": "Name of the requested browser",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "Asyncs next() callback function",
                    "type": "Function"
                }
            ],
            "chainable": 1,
            "class": "Dalek.Driver",
            "module": "DalekJS",
            "namespace": "Dalek"
        },
        {
            "file": "lib/dalek/host.js",
            "line": 32,
            "description": "Sets the configuration options for the \ndalek remote browser executor",
            "params": [
                {
                    "name": "opts",
                    "description": "Configuration options",
                    "type": "Options"
                }
            ],
            "is_constructor": 1,
            "class": "Host",
            "module": "DalekJS",
            "namespace": "Dalek"
        },
        {
            "file": "lib/dalek/host.js",
            "line": 56,
            "description": "Default port that the Dalek remote server is linking against",
            "itemtype": "property",
            "name": "defaultPort",
            "type": "{integer}",
            "default": "9020",
            "class": "Host",
            "module": "Dalek"
        },
        {
            "file": "lib/dalek/host.js",
            "line": 66,
            "description": "Instance of the local browser",
            "itemtype": "property",
            "name": "bro",
            "type": "{object}",
            "default": "null",
            "class": "Host",
            "module": "Dalek"
        },
        {
            "file": "lib/dalek/host.js",
            "line": 76,
            "description": "Instance of the reporter event emitter",
            "itemtype": "property",
            "name": "reporterEvents",
            "type": "{EventEmitter2}",
            "default": "null",
            "class": "Host",
            "module": "Dalek"
        },
        {
            "file": "lib/dalek/host.js",
            "line": 86,
            "description": "Instance of the dalek config",
            "itemtype": "property",
            "name": "config",
            "type": "{Dalek.Config}",
            "default": "null",
            "class": "Host",
            "module": "Dalek"
        },
        {
            "file": "lib/dalek/host.js",
            "line": 96,
            "description": "Local configuration",
            "itemtype": "property",
            "name": "configuration",
            "type": "{object}",
            "default": "{}",
            "class": "Host",
            "module": "Dalek"
        },
        {
            "file": "lib/dalek/host.js",
            "line": 106,
            "description": "Host address of the called webdriver server",
            "itemtype": "property",
            "name": "remoteHost",
            "type": "{string}",
            "default": "null",
            "class": "Host",
            "module": "Dalek"
        },
        {
            "file": "lib/dalek/host.js",
            "line": 116,
            "description": "Path of the webdriver server endpoint",
            "itemtype": "property",
            "name": "remotePath",
            "type": "{string}",
            "default": "null",
            "class": "Host",
            "module": "Dalek"
        },
        {
            "file": "lib/dalek/host.js",
            "line": 126,
            "description": "Port of the called webdriver server",
            "itemtype": "property",
            "name": "remotePort",
            "type": "{string}",
            "default": "null",
            "class": "Host",
            "module": "Dalek"
        },
        {
            "file": "lib/dalek/host.js",
            "line": 136,
            "description": "Secret that got emitted by the remote instance",
            "itemtype": "property",
            "name": "remoteSecret",
            "type": "{string}",
            "default": "null",
            "class": "Host",
            "module": "Dalek"
        },
        {
            "file": "lib/dalek/host.js",
            "line": 146,
            "description": "Identifier of the remote client",
            "itemtype": "property",
            "name": "remoteId",
            "type": "{string}",
            "default": "null",
            "class": "Host",
            "module": "Dalek"
        },
        {
            "file": "lib/dalek/host.js",
            "line": 156,
            "description": "Secret that is stored in the local instance",
            "itemtype": "property",
            "name": "secret",
            "type": "{string}",
            "default": "null",
            "class": "Host",
            "module": "Dalek"
        },
        {
            "file": "lib/dalek/host.js",
            "line": 166,
            "description": "Incoming message that needs to be proxied\nto the local webdriver server",
            "itemtype": "property",
            "name": "proxyRequest",
            "type": "{http.IncomingMessage}",
            "default": "null",
            "class": "Host",
            "module": "Dalek"
        },
        {
            "file": "lib/dalek/host.js",
            "line": 177,
            "description": "Starts the remote proxy server,\nprepares the config",
            "itemtype": "method",
            "name": "run",
            "params": [
                {
                    "name": "opts",
                    "description": "Configuration options",
                    "type": "Object"
                }
            ],
            "chainable": 1,
            "class": "Host",
            "module": "Dalek"
        },
        {
            "file": "lib/dalek/host.js",
            "line": 200,
            "description": "Shutdown the proxy server",
            "itemtype": "method",
            "name": "kill",
            "return": {
                "description": "Promise",
                "type": "Object"
            },
            "class": "Host",
            "module": "Dalek"
        },
        {
            "file": "lib/dalek/host.js",
            "line": 213,
            "description": "Launches the local browser",
            "itemtype": "method",
            "name": "_launcher",
            "params": [
                {
                    "name": "request",
                    "description": "Request from the dalek remote caller",
                    "type": "Object"
                },
                {
                    "name": "response",
                    "description": "Response to the dalek remote caller",
                    "type": "Object"
                }
            ],
            "access": "private",
            "tagname": "",
            "chainable": 1,
            "class": "Host",
            "module": "Dalek"
        },
        {
            "file": "lib/dalek/host.js",
            "line": 240,
            "description": "Shuts the local browser down,\nend the otherwise hanging request",
            "itemtype": "method",
            "name": "_launcher",
            "params": [
                {
                    "name": "response",
                    "description": "Response to the dalek remote caller",
                    "type": "Object"
                }
            ],
            "access": "private",
            "tagname": "",
            "chainable": 1,
            "class": "Host",
            "module": "Dalek"
        },
        {
            "file": "lib/dalek/host.js",
            "line": 260,
            "description": "Requires the local browser module & returns it",
            "itemtype": "method",
            "name": "_loadBrowserModule",
            "params": [
                {
                    "name": "browser",
                    "description": "Name of the browser to load",
                    "type": "String"
                },
                {
                    "name": "response",
                    "description": "Response to the dalek remote caller",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The local browser module",
                "type": "Object"
            },
            "access": "private",
            "tagname": "",
            "class": "Host",
            "module": "Dalek"
        },
        {
            "file": "lib/dalek/host.js",
            "line": 286,
            "description": "Stores network data from the local browser instance,\nsends browser specific data to the client",
            "itemtype": "method",
            "name": "_onBrowserLaunch",
            "params": [
                {
                    "name": "browser",
                    "description": "Name of the browser to load",
                    "type": "String"
                },
                {
                    "name": "response",
                    "description": "Response to the dalek remote caller",
                    "type": "Object"
                }
            ],
            "chainable": 1,
            "access": "private",
            "tagname": "",
            "class": "Host",
            "module": "Dalek"
        },
        {
            "file": "lib/dalek/host.js",
            "line": 307,
            "description": "Dispatches all incoming requests,\npossible endpoints local webdriver server, \nbrowser launcher, browser shutdown handler",
            "itemtype": "method",
            "name": "_createServer",
            "params": [
                {
                    "name": "request",
                    "description": "Request from the dalek remote caller",
                    "type": "Object"
                },
                {
                    "name": "response",
                    "description": "Response to the dalek remote caller",
                    "type": "Object"
                }
            ],
            "access": "private",
            "tagname": "",
            "chainable": 1,
            "class": "Host",
            "module": "Dalek"
        },
        {
            "file": "lib/dalek/host.js",
            "line": 351,
            "description": "Proxies data from the local webdriver server to the client",
            "itemtype": "method",
            "name": "_onRequestDataChunk",
            "params": [
                {
                    "name": "chunk",
                    "description": "Chunk of the incoming request data",
                    "type": "Buffer"
                }
            ],
            "access": "private",
            "tagname": "",
            "chainable": 1,
            "class": "Host",
            "module": "Dalek"
        },
        {
            "file": "lib/dalek/host.js",
            "line": 365,
            "description": "Proxies remote data to the webdriver server",
            "itemtype": "method",
            "name": "_onProxyRequest",
            "params": [
                {
                    "name": "request",
                    "description": "Request from the dalek remote caller",
                    "type": "Object"
                },
                {
                    "name": "response",
                    "description": "Response to the dalek remote caller",
                    "type": "Object"
                },
                {
                    "name": "res",
                    "description": "Response to the local webdriver server",
                    "type": "Object"
                }
            ],
            "access": "private",
            "tagname": "",
            "chainable": 1,
            "class": "Host",
            "module": "Dalek"
        },
        {
            "file": "lib/dalek/host.js",
            "line": 392,
            "description": "Handles data exchange between the client and the\nlocal webdriver server",
            "itemtype": "method",
            "name": "_onProxyRequest",
            "params": [
                {
                    "name": "request",
                    "description": "Request from the dalek remote caller",
                    "type": "Object"
                },
                {
                    "name": "response",
                    "description": "Response to the dalek remote caller",
                    "type": "Object"
                },
                {
                    "name": "res",
                    "description": "Response to the local webdriver server",
                    "type": "Object"
                },
                {
                    "name": "chunks",
                    "description": "Array of received data pieces that should be forwarded to the local webdriver server",
                    "type": "Array"
                }
            ],
            "access": "private",
            "tagname": "",
            "chainable": 1,
            "class": "Host",
            "module": "Dalek"
        },
        {
            "file": "lib/dalek/host.js",
            "line": 425,
            "description": "Extracts the browser that should be launched\nfrom the launch url request",
            "itemtype": "method",
            "name": "_extractBrowser",
            "params": [
                {
                    "name": "url",
                    "description": "Url to parse",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Extracted browser",
                "type": "String"
            },
            "access": "private",
            "tagname": "",
            "class": "Host",
            "module": "Dalek"
        },
        {
            "file": "lib/dalek/host.js",
            "line": 439,
            "description": "Generates the request options from the incoming\nrequest that should then be forwared to the local\nwebdriver server",
            "itemtype": "method",
            "name": "_generateProxyRequestOptions",
            "params": [
                {
                    "name": "header",
                    "description": "Header meta data",
                    "type": "Object"
                },
                {
                    "name": "method",
                    "description": "HTTP method",
                    "type": "String"
                },
                {
                    "name": "url",
                    "description": "Webriver server endpoint url",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Request options",
                "type": "Object"
            },
            "access": "private",
            "tagname": "",
            "class": "Host",
            "module": "Dalek"
        },
        {
            "file": "lib/dalek/host.js",
            "line": 473,
            "description": "Gets the local ip address\n(should be the IPv4 address where the runner is accessible from)",
            "itemtype": "method",
            "name": "_getLocalIp",
            "return": {
                "description": "Local IP address",
                "type": "String"
            },
            "access": "private",
            "tagname": "",
            "class": "Host",
            "module": "Dalek"
        },
        {
            "file": "lib/dalek/host.js",
            "line": 493,
            "description": "Tries to find the local IP address",
            "itemtype": "method",
            "name": "_grepIp",
            "params": [],
            "chainable": 1,
            "access": "private",
            "tagname": "",
            "class": "Host",
            "module": "Dalek"
        },
        {
            "file": "lib/dalek/remote.js",
            "line": 41,
            "description": "Remote webdriver path",
            "itemtype": "property",
            "name": "path",
            "type": "{string}",
            "default": "''",
            "class": "Dalek.Remote",
            "module": "Remote",
            "namespace": "Dalek"
        },
        {
            "file": "lib/dalek/remote.js",
            "line": 51,
            "description": "Remote port",
            "itemtype": "property",
            "name": "port",
            "type": "{integer}",
            "default": "9020",
            "class": "Dalek.Remote",
            "module": "Remote",
            "namespace": "Dalek"
        },
        {
            "file": "lib/dalek/remote.js",
            "line": 61,
            "description": "Remote host",
            "itemtype": "property",
            "name": "host",
            "type": "{string}",
            "default": "''",
            "class": "Dalek.Remote",
            "module": "Remote",
            "namespace": "Dalek"
        },
        {
            "file": "lib/dalek/remote.js",
            "line": 71,
            "description": "Url (with placeholders) to launch browsers on the remote instance",
            "itemtype": "property",
            "name": "defaultLaunchUrl",
            "type": "{string}",
            "default": "http://{{host}}:{{port}}/dalek/launch/{{browser}}",
            "class": "Dalek.Remote",
            "module": "Remote",
            "namespace": "Dalek"
        },
        {
            "file": "lib/dalek/remote.js",
            "line": 81,
            "description": "Url (with placeholders) to kill browsers on the remote instance",
            "itemtype": "property",
            "name": "defaultKillUrl",
            "type": "{string}",
            "default": "http://{{host}}:{{port}}/dalek/kill",
            "class": "Dalek.Remote",
            "module": "Remote",
            "namespace": "Dalek"
        },
        {
            "file": "lib/dalek/remote.js",
            "line": 91,
            "description": "Url to start a specific remote browser session",
            "itemtype": "property",
            "name": "launchUrl",
            "type": "{string}",
            "default": "''",
            "class": "Dalek.Remote",
            "module": "Remote",
            "namespace": "Dalek"
        },
        {
            "file": "lib/dalek/remote.js",
            "line": 101,
            "description": "Url to kill a specific remote browser session",
            "itemtype": "property",
            "name": "killUrl",
            "type": "{string}",
            "default": "''",
            "class": "Dalek.Remote",
            "module": "Remote",
            "namespace": "Dalek"
        },
        {
            "file": "lib/dalek/remote.js",
            "line": 111,
            "description": "Internal config name of the browser to start remotly",
            "itemtype": "property",
            "name": "browser",
            "type": "{string}",
            "default": "'",
            "class": "Dalek.Remote",
            "module": "Remote",
            "namespace": "Dalek"
        },
        {
            "file": "lib/dalek/remote.js",
            "line": 121,
            "description": "Remote browser alias to start a browser\n(browser.name or browser.actAs or user input browser alias)",
            "itemtype": "property",
            "name": "browserAlias",
            "type": "{string}",
            "default": "'",
            "class": "Dalek.Remote",
            "module": "Remote",
            "namespace": "Dalek"
        },
        {
            "file": "lib/dalek/remote.js",
            "line": 132,
            "description": "Driver defaults",
            "itemtype": "property",
            "name": "driverDefaults",
            "type": "{object}",
            "class": "Dalek.Remote",
            "module": "Remote",
            "namespace": "Dalek"
        },
        {
            "file": "lib/dalek/remote.js",
            "line": 141,
            "description": "Request secret or false when unsecure",
            "params": [
                {
                    "name": "secret",
                    "description": ""
                }
            ],
            "type": "{string|bool}",
            "default": "false",
            "class": "Dalek.Remote",
            "module": "Remote",
            "namespace": "Dalek"
        },
        {
            "file": "lib/dalek/remote.js",
            "line": 151,
            "description": "Stores & validates the incoming browser config",
            "itemtype": "method",
            "name": "launch",
            "params": [
                {
                    "name": "configuration",
                    "description": "Browser configuration",
                    "type": "Object"
                },
                {
                    "name": "events",
                    "description": "EventEmitter (Reporter Emitter instance)",
                    "type": "EventEmitter2"
                },
                {
                    "name": "config",
                    "description": "Dalek configuration class",
                    "type": "Dalek.Internal.Config"
                }
            ],
            "return": {
                "description": "Browser promise",
                "type": "Object"
            },
            "class": "Dalek.Remote",
            "module": "Remote",
            "namespace": "Dalek"
        },
        {
            "file": "lib/dalek/remote.js",
            "line": 186,
            "description": "Kills the remote browser",
            "itemtype": "method",
            "name": "kill",
            "return": {
                "description": "Promise",
                "type": "Object"
            },
            "class": "Dalek.Remote",
            "module": "Remote",
            "namespace": "Dalek"
        },
        {
            "file": "lib/dalek/remote.js",
            "line": 198,
            "description": "Injects the browser name",
            "itemtype": "method",
            "name": "setBrowser",
            "params": [
                {
                    "name": "browser",
                    "description": "Browser to launch",
                    "type": "String"
                }
            ],
            "chainable": 1,
            "class": "Dalek.Remote",
            "module": "Remote",
            "namespace": "Dalek"
        },
        {
            "file": "lib/dalek/remote.js",
            "line": 215,
            "description": "Listens on the response of the initial browser launch call\nand collects the response data, fires the _handshakeFinished call\nafter the response ended",
            "itemtype": "method",
            "name": "_afterRemoteBrowserLaunched",
            "params": [
                {
                    "name": "deferred",
                    "description": "Promise",
                    "type": "Object"
                },
                {
                    "name": "response",
                    "description": "Browser launch response object",
                    "type": "Object"
                }
            ],
            "chainable": 1,
            "access": "private",
            "tagname": "",
            "class": "Dalek.Remote",
            "module": "Remote",
            "namespace": "Dalek"
        },
        {
            "file": "lib/dalek/remote.js",
            "line": 237,
            "description": "Parses the response data of the initial browser handshake,\nsets the longName, desiredCapabilities & driverDefaults,\nemits the browser data (can be used by reporters & drivers)",
            "itemtype": "method",
            "name": "_handshakeFinished",
            "params": [
                {
                    "name": "deferred",
                    "description": "Promise",
                    "type": "Object"
                },
                {
                    "name": "data",
                    "description": "Remote browser data (longName, desiredCapabilities, driverDefaults)",
                    "type": "Array"
                }
            ],
            "chainable": 1,
            "access": "private",
            "tagname": "",
            "class": "Dalek.Remote",
            "module": "Remote",
            "namespace": "Dalek"
        },
        {
            "file": "lib/dalek/remote.js",
            "line": 270,
            "description": "Sets the host & port of the remote instance,\nextracts the remote browser to call,\ngenerates the launch & kill objects for this session",
            "itemtype": "method",
            "name": "_loadConfigs",
            "params": [
                {
                    "name": "configuration",
                    "description": "Browser session configuration",
                    "type": "Object"
                },
                {
                    "name": "config",
                    "description": "Dalek configuration data",
                    "type": "Object"
                }
            ],
            "chainable": 1,
            "access": "private",
            "tagname": "",
            "class": "Dalek.Remote",
            "module": "Remote",
            "namespace": "Dalek"
        },
        {
            "file": "lib/dalek/remote.js",
            "line": 303,
            "description": "Replaces {{host}}, {{port}} & {{browser}} placeholders\nin the given url with data from this.host, this.port & this.browserAlias",
            "itemtype": "method",
            "name": "_replaceUrlPlaceholder",
            "params": [
                {
                    "name": "url",
                    "description": "Url with placeholder",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Url with replaced placeholders",
                "type": "String"
            },
            "access": "private",
            "tagname": "",
            "class": "Dalek.Remote",
            "module": "Remote",
            "namespace": "Dalek"
        },
        {
            "file": "lib/dalek/reporter.js",
            "line": 39,
            "description": "Reporters from the canary channel",
            "params": [
                {
                    "name": "isCanary",
                    "description": ""
                }
            ],
            "class": "Dalek.Reporter",
            "module": "DalekJS",
            "namespace": "Dalek"
        },
        {
            "file": "lib/dalek/reporter.js",
            "line": 47,
            "description": "Checks if the requested reporter exists",
            "itemtype": "method",
            "name": "isReporter",
            "params": [
                {
                    "name": "reporter",
                    "description": "Name of the reporter",
                    "type": "String"
                }
            ],
            "return": {
                "description": "isReporter Reporter exists",
                "type": "Bool"
            },
            "class": "Dalek.Reporter",
            "module": "DalekJS",
            "namespace": "Dalek"
        },
        {
            "file": "lib/dalek/reporter.js",
            "line": 71,
            "description": "Loads a requested reporter",
            "itemtype": "method",
            "name": "loadReporter",
            "params": [
                {
                    "name": "reporter",
                    "description": "Name of the reporter",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "Options to pass to the reporter",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "reporterInstance Reporter instance",
                "type": "Object"
            },
            "class": "Dalek.Reporter",
            "module": "DalekJS",
            "namespace": "Dalek"
        },
        {
            "file": "lib/dalek/suite.js",
            "line": 35,
            "is_constructor": 1,
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "Dalek.Suite",
            "module": "DalekJS",
            "namespace": "Dalek"
        },
        {
            "file": "lib/dalek/suite.js",
            "line": 59,
            "description": "Assigns the initial options\ndriverEmitter -> the drivers event dispatcher\nreporterEmitter -> the reporters event dispatcher\ndriver -> the driver instance (e.g. native webdriver, selenium, etc.)\nname -> the suites filename (default suite name)",
            "itemtype": "method",
            "name": "initialize",
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                }
            ],
            "chainable": 1,
            "class": "Dalek.Suite",
            "module": "DalekJS",
            "namespace": "Dalek"
        },
        {
            "file": "lib/dalek/suite.js",
            "line": 81,
            "description": "Loads the testsuite that should be executed",
            "itemtype": "method",
            "name": "loadTestsuite",
            "params": [
                {
                    "name": "testfile",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "testsuite",
                "type": "Object"
            },
            "class": "Dalek.Suite",
            "module": "DalekJS",
            "namespace": "Dalek"
        },
        {
            "file": "lib/dalek/suite.js",
            "line": 121,
            "description": "Checks if all tests from the testsuite are executed.\nRuns the next test if not.\nTriggers `asyncs` callback if the suite is finished.\nDecrements the `testsToBeExecuted` counter",
            "itemtype": "method",
            "name": "testFinished",
            "params": [
                {
                    "name": "callback",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "tests",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "test",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "event",
                    "description": "",
                    "type": "String"
                }
            ],
            "chainable": 1,
            "class": "Dalek.Suite",
            "module": "DalekJS",
            "namespace": "Dalek"
        },
        {
            "file": "lib/dalek/suite.js",
            "line": 176,
            "description": "Decrements number of tests that should be executed in this suite",
            "itemtype": "method",
            "name": "decrementTestsToBeExecuted",
            "return": {
                "description": "numberOfTestsToBeExecuted",
                "type": "Integer"
            },
            "class": "Dalek.Suite",
            "module": "DalekJS",
            "namespace": "Dalek"
        },
        {
            "file": "lib/dalek/suite.js",
            "line": 187,
            "description": "Returns the name of the testsuite\nIf the suite has no name, it will return the testsuites filename",
            "itemtype": "method",
            "name": "getName",
            "return": {
                "description": "name",
                "type": "String"
            },
            "class": "Dalek.Suite",
            "module": "DalekJS",
            "namespace": "Dalek"
        },
        {
            "file": "lib/dalek/suite.js",
            "line": 205,
            "description": "Returns the options of the testsuite\nIf the suite has no options, it will return an empty object",
            "itemtype": "method",
            "name": "getOptions",
            "return": {
                "description": "options Suite options",
                "type": "Object"
            },
            "class": "Dalek.Suite",
            "module": "DalekJS",
            "namespace": "Dalek"
        },
        {
            "file": "lib/dalek/suite.js",
            "line": 223,
            "description": "Returns all names (aka. object keys) the tests that should be executed",
            "itemtype": "method",
            "name": "getTests",
            "return": {
                "description": "test",
                "type": "Array"
            },
            "class": "Dalek.Suite",
            "module": "DalekJS",
            "namespace": "Dalek"
        },
        {
            "file": "lib/dalek/suite.js",
            "line": 234,
            "description": "Returns the number of tests to be executed",
            "itemtype": "method",
            "name": "getNumberOfTests",
            "params": [
                {
                    "name": "tests",
                    "description": "",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "numberOfTests",
                "type": "Integer"
            },
            "class": "Dalek.Suite",
            "module": "DalekJS",
            "namespace": "Dalek"
        },
        {
            "file": "lib/dalek/suite.js",
            "line": 246,
            "description": "Returns the next test, that should be executed",
            "itemtype": "method",
            "name": "getNextTest",
            "return": {
                "description": "testName",
                "type": "String"
            },
            "class": "Dalek.Suite",
            "module": "DalekJS",
            "namespace": "Dalek"
        },
        {
            "file": "lib/dalek/suite.js",
            "line": 257,
            "description": "Executes the next test in the sequence",
            "itemtype": "method",
            "name": "executeNextTest",
            "params": [
                {
                    "name": "tests",
                    "description": "",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "testValue",
                "type": "Mixed"
            },
            "class": "Dalek.Suite",
            "module": "DalekJS",
            "namespace": "Dalek"
        },
        {
            "file": "lib/dalek/suite.js",
            "line": 295,
            "description": "Generates a new test instance",
            "itemtype": "method",
            "name": "getTestInstance",
            "params": [
                {
                    "name": "name",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "test",
                "type": "Dalek.Test"
            },
            "class": "Dalek.Suite",
            "module": "DalekJS",
            "namespace": "Dalek"
        },
        {
            "file": "lib/dalek/suite.js",
            "line": 307,
            "description": "Returns a test function by its name",
            "itemtype": "method",
            "name": "getTest",
            "params": [
                {
                    "name": "name",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "test",
                "type": "Function"
            },
            "class": "Dalek.Suite",
            "module": "DalekJS",
            "namespace": "Dalek"
        },
        {
            "file": "lib/dalek/suite.js",
            "line": 319,
            "description": "Will be executed if a test is started, that does not exist",
            "itemtype": "method",
            "name": "testDoesNotExist",
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "Dalek.Suite",
            "module": "DalekJS",
            "namespace": "Dalek"
        },
        {
            "file": "lib/dalek/suite.js",
            "line": 333,
            "description": "Runs any tests from this testsuite in sequence",
            "itemtype": "method",
            "name": "run",
            "params": [
                {
                    "name": "callback",
                    "description": "",
                    "type": "Function"
                }
            ],
            "chainable": 1,
            "class": "Dalek.Suite",
            "module": "DalekJS",
            "namespace": "Dalek"
        },
        {
            "file": "lib/dalek/timer.js",
            "line": 51,
            "description": "Starts the timer",
            "itemtype": "method",
            "name": "start",
            "chainable": 1,
            "class": "Dalek.Timer",
            "module": "DalekJS",
            "namespace": "Dalek"
        },
        {
            "file": "lib/dalek/timer.js",
            "line": 63,
            "description": "Stops the timer",
            "itemtype": "method",
            "name": "stop",
            "chainable": 1,
            "class": "Dalek.Timer",
            "module": "DalekJS",
            "namespace": "Dalek"
        },
        {
            "file": "lib/dalek/timer.js",
            "line": 75,
            "description": "Returns the elapsed time in ms",
            "itemtype": "method",
            "name": "getElapsedTime",
            "return": {
                "description": "",
                "type": "Float"
            },
            "class": "Dalek.Timer",
            "module": "DalekJS",
            "namespace": "Dalek"
        },
        {
            "file": "lib/dalek/timer.js",
            "line": 86,
            "description": "Returns an object with test run time information\ncontaining hours, minutes & seconds",
            "itemtype": "method",
            "name": "getElapsedTimeFormatted",
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "Dalek.Timer",
            "module": "DalekJS",
            "namespace": "Dalek"
        },
        {
            "file": "lib/dalek/unit.js",
            "line": 38,
            "description": "Prepares the test instance values",
            "params": [
                {
                    "name": "opts",
                    "description": "Options like the tests name, etc.",
                    "type": "Object"
                }
            ],
            "is_constructor": 1,
            "class": "Dalek.Unit",
            "module": "DalekJS",
            "namespace": "Dalek"
        },
        {
            "file": "lib/dalek/unit.js",
            "line": 80,
            "description": "Specify how many assertions are expected to run within a test.\nVery useful for ensuring that all your callbacks and assertions are run.",
            "itemtype": "method",
            "name": "expect",
            "params": [
                {
                    "name": "expecatation",
                    "description": "Number of assertions that should be run",
                    "type": "Integer"
                }
            ],
            "chainable": 1,
            "class": "Dalek.Unit",
            "module": "DalekJS",
            "namespace": "Dalek"
        },
        {
            "file": "lib/dalek/unit.js",
            "line": 94,
            "description": "Global data store (works between the node & browser envs)",
            "itemtype": "method",
            "name": "data",
            "params": [
                {
                    "name": "key",
                    "description": "Key to store or fetch data",
                    "type": "String|number"
                },
                {
                    "name": "value",
                    "description": "*optional* Data that should be stored",
                    "type": "Mixed"
                }
            ],
            "return": {
                "description": "Data that has been stored",
                "type": "Mixed"
            },
            "chainable": 1,
            "class": "Dalek.Unit",
            "module": "DalekJS",
            "namespace": "Dalek"
        },
        {
            "file": "lib/dalek/unit.js",
            "line": 113,
            "description": "Increment the number of executed assertions",
            "itemtype": "method",
            "name": "incrementExpectations",
            "chainable": 1,
            "class": "Dalek.Unit",
            "module": "DalekJS",
            "namespace": "Dalek"
        },
        {
            "file": "lib/dalek/unit.js",
            "line": 125,
            "description": "Increment the number of failed assertions",
            "itemtype": "method",
            "name": "incrementFailedAssertions",
            "chainable": 1,
            "class": "Dalek.Unit",
            "module": "DalekJS",
            "namespace": "Dalek"
        },
        {
            "file": "lib/dalek/unit.js",
            "line": 137,
            "description": "Checks if the runned tests fullfill the set expectations\nor if no expectations were raised",
            "itemtype": "method",
            "name": "checkExpectations",
            "return": {
                "description": "checkedExpectations Expectations match",
                "type": "Bool"
            },
            "class": "Dalek.Unit",
            "module": "DalekJS",
            "namespace": "Dalek"
        },
        {
            "file": "lib/dalek/unit.js",
            "line": 149,
            "description": "Checks if all runned assertions passed",
            "itemtype": "method",
            "name": "checkAssertions",
            "return": {
                "description": "assertionFailed Any expectation failed",
                "type": "Bool"
            },
            "class": "Dalek.Unit",
            "module": "DalekJS",
            "namespace": "Dalek"
        },
        {
            "file": "lib/dalek/unit.js",
            "line": 160,
            "description": "Sets up all the bindings needed for a test to run",
            "itemtype": "method",
            "name": "done",
            "return": {
                "description": "result A promise",
                "type": "Object"
            },
            "access": "private",
            "tagname": "",
            "class": "Dalek.Unit",
            "module": "DalekJS",
            "namespace": "Dalek"
        },
        {
            "file": "lib/dalek/unit.js",
            "line": 179,
            "description": "Allow to use custom functions in order to embrace code reuse across\nmultiple files (for example for use in Page Objects).",
            "itemtype": "method",
            "name": "andThen",
            "params": [
                {
                    "name": "a",
                    "description": "function, where 'this' references the test",
                    "type": "Function"
                }
            ],
            "chainable": 1,
            "class": "Dalek.Unit",
            "module": "DalekJS",
            "namespace": "Dalek"
        },
        {
            "file": "lib/dalek/unit.js",
            "line": 191,
            "description": "Adds a node style function (with node err callback) style to the test.",
            "itemtype": "method",
            "name": "node",
            "params": [
                {
                    "name": "a",
                    "description": "node function that is executed in the context of the test.",
                    "type": "Function"
                }
            ],
            "chainable": 1,
            "class": "Dalek.Unit",
            "module": "DalekJS",
            "namespace": "Dalek"
        },
        {
            "file": "lib/dalek/unit.js",
            "line": 214,
            "description": "Adds a promise to the chain of tests.",
            "itemtype": "method",
            "name": "promise",
            "params": [
                {
                    "name": "a",
                    "description": "q promise",
                    "type": "Promise"
                }
            ],
            "chainable": 1,
            "class": "Dalek.Unit",
            "module": "DalekJS",
            "namespace": "Dalek"
        },
        {
            "file": "lib/dalek/unit.js",
            "line": 226,
            "description": "Emits the test finished events & resolves all promises\nwhen its done",
            "itemtype": "method",
            "name": "_testFinished",
            "params": [
                {
                    "name": "result",
                    "description": "Promised result var",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "result Promised result var",
                "type": "Object"
            },
            "access": "private",
            "tagname": "",
            "class": "Dalek.Unit",
            "module": "DalekJS",
            "namespace": "Dalek"
        },
        {
            "file": "lib/dalek/unit.js",
            "line": 257,
            "description": "Emits the test started event",
            "itemtype": "method",
            "name": "_reportTestStarted",
            "params": [
                {
                    "name": "name",
                    "description": "Name of the test",
                    "type": "String"
                }
            ],
            "chainable": 1,
            "access": "private",
            "tagname": "",
            "class": "Dalek.Unit",
            "module": "DalekJS",
            "namespace": "Dalek"
        },
        {
            "file": "lib/dalek/unit.js",
            "line": 271,
            "description": "Checks if the test run is complete & emits/resolves\nall the needed events/promises when the run is complete",
            "itemtype": "method",
            "name": "_onDriverMessage",
            "params": [
                {
                    "name": "data",
                    "description": "Data that is returned by the driver:message event",
                    "type": "Object"
                }
            ],
            "chainable": 1,
            "access": "private",
            "tagname": "",
            "class": "Dalek.Unit",
            "module": "DalekJS",
            "namespace": "Dalek"
        },
        {
            "file": "lib/dalek/unit.js",
            "line": 294,
            "description": "Emits an event, that the current test run has been finished",
            "itemtype": "method",
            "name": "_emitConcreteTestFinished",
            "chainable": 1,
            "access": "private",
            "tagname": "",
            "class": "Dalek.Unit",
            "module": "DalekJS",
            "namespace": "Dalek"
        },
        {
            "file": "lib/dalek/unit.js",
            "line": 307,
            "description": "Emits an event that describes the current state of all assertions",
            "itemtype": "method",
            "name": "_emitAssertionStatus",
            "chainable": 1,
            "access": "private",
            "tagname": "",
            "class": "Dalek.Unit",
            "module": "DalekJS",
            "namespace": "Dalek"
        },
        {
            "file": "lib/dalek/unit.js",
            "line": 324,
            "description": "Get the overall test status (assertions & expectation)",
            "itemtype": "method",
            "name": "_testStatus",
            "return": {
                "description": "status The test status",
                "type": "Bool"
            },
            "chainable": 1,
            "access": "private",
            "tagname": "",
            "class": "Dalek.Unit",
            "module": "DalekJS",
            "namespace": "Dalek"
        },
        {
            "file": "lib/dalek/unit.js",
            "line": 337,
            "description": "Emits an event that describes the current state of all assertions.\nThe event should be fired when a test is finished",
            "itemtype": "method",
            "name": "_emitTestFinished",
            "chainable": 1,
            "access": "private",
            "tagname": "",
            "class": "Dalek.Unit",
            "module": "DalekJS",
            "namespace": "Dalek"
        },
        {
            "file": "lib/dalek/unit.js",
            "line": 360,
            "description": "Kicks off the test & binds all promises/events",
            "itemtype": "method",
            "name": "_testFin",
            "return": {
                "description": "promise A promise",
                "type": "Object"
            },
            "access": "private",
            "tagname": "",
            "class": "Dalek.Unit",
            "module": "DalekJS",
            "namespace": "Dalek"
        },
        {
            "file": "lib/dalek/unit.js",
            "line": 383,
            "description": "Copies assertion methods",
            "itemtype": "method",
            "name": "_inheritAssertions",
            "params": [
                {
                    "name": "test",
                    "description": "Instacne of test",
                    "type": "Test"
                }
            ],
            "chainable": 1,
            "access": "private",
            "tagname": "",
            "class": "Dalek.Unit",
            "module": "DalekJS",
            "namespace": "Dalek"
        },
        {
            "file": "lib/dalek/unit.js",
            "line": 399,
            "description": "Copies assertion helper methods",
            "itemtype": "method",
            "name": "_inheritAssertions",
            "params": [
                {
                    "name": "test",
                    "description": "Instacne of test",
                    "type": "Test"
                }
            ],
            "chainable": 1,
            "access": "private",
            "tagname": "",
            "class": "Dalek.Unit",
            "module": "DalekJS",
            "namespace": "Dalek"
        },
        {
            "file": "lib/dalek/unit.js",
            "line": 431,
            "description": "Set up the instance",
            "itemtype": "method",
            "name": "_inheritAssertions",
            "params": [
                {
                    "name": "test",
                    "description": "Instacne of test",
                    "type": "Test"
                },
                {
                    "name": "opts",
                    "description": "Options",
                    "type": "Object"
                }
            ],
            "chainable": 1,
            "access": "private",
            "tagname": "",
            "class": "Dalek.Unit",
            "module": "DalekJS",
            "namespace": "Dalek"
        },
        {
            "file": "lib/dalek/unit.js",
            "line": 451,
            "description": "Alias for 'andThen'; use if it is the first function called in the test case.",
            "itemtype": "method",
            "name": "start",
            "chainable": 1,
            "class": "Dalek.Unit",
            "module": "DalekJS",
            "namespace": "Dalek"
        },
        {
            "file": "lib/dalek.js",
            "line": 38,
            "description": "Default options",
            "type": "{Object}",
            "class": "Dalek",
            "module": "DalekJS",
            "namespace": "Dalek"
        },
        {
            "file": "lib/dalek.js",
            "line": 51,
            "description": "Setup all the options needed to configure dalek",
            "params": [
                {
                    "name": "opts",
                    "description": "Configuration options",
                    "type": "Options"
                }
            ],
            "is_constructor": 1,
            "class": "Dalek",
            "module": "DalekJS",
            "namespace": "Dalek"
        },
        {
            "file": "lib/dalek.js",
            "line": 124,
            "description": "Runs the configured testsuites",
            "itemtype": "method",
            "name": "run",
            "chainable": 1,
            "class": "Dalek",
            "module": "DalekJS"
        },
        {
            "file": "lib/dalek.js",
            "line": 149,
            "description": "Reports the all testsuites executed event",
            "itemtype": "method",
            "name": "testsuitesFinished",
            "chainable": 1,
            "class": "Dalek",
            "module": "DalekJS"
        },
        {
            "file": "lib/dalek.js",
            "line": 162,
            "description": "Reports the all testsuites executed event",
            "itemtype": "method",
            "name": "reportRunFinished",
            "chainable": 1,
            "class": "Dalek",
            "module": "DalekJS"
        },
        {
            "file": "lib/dalek.js",
            "line": 193,
            "description": "Normalizes options",
            "itemtype": "method",
            "name": "normalizeOptions",
            "params": [
                {
                    "name": "options",
                    "description": "Raw options",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Normalized options",
                "type": "Object"
            },
            "class": "Dalek",
            "module": "DalekJS"
        },
        {
            "file": "lib/dalek.js",
            "line": 211,
            "description": "Sets up system env properties",
            "itemtype": "method",
            "name": "_initialize",
            "chainable": 1,
            "access": "private",
            "tagname": "",
            "class": "Dalek",
            "module": "DalekJS"
        },
        {
            "file": "lib/dalek.js",
            "line": 232,
            "description": "Sets up all the reporters",
            "itemtype": "method",
            "name": "_setupReporters",
            "chainable": 1,
            "access": "private",
            "tagname": "",
            "class": "Dalek",
            "module": "DalekJS"
        },
        {
            "file": "lib/dalek.js",
            "line": 249,
            "description": "Adds a reporter",
            "itemtype": "method",
            "name": "_addReporter",
            "params": [
                {
                    "name": "reporter",
                    "description": "Name of the reporter to add",
                    "type": "String"
                }
            ],
            "chainable": 1,
            "access": "private",
            "tagname": "",
            "class": "Dalek",
            "module": "DalekJS"
        },
        {
            "file": "lib/dalek.js",
            "line": 263,
            "description": "Updates the assertion state",
            "itemtype": "method",
            "name": "_onReportAssertion",
            "params": [
                {
                    "name": "assertion",
                    "description": "Informations aout the runned assertions",
                    "type": "Object"
                }
            ],
            "chainable": 1,
            "access": "private",
            "tagname": "",
            "class": "Dalek",
            "module": "DalekJS"
        },
        {
            "file": "lib/dalek.js",
            "line": 282,
            "description": "Initizializes the driver instances",
            "itemtype": "method",
            "name": "_initDriver",
            "chainable": 1,
            "access": "private",
            "tagname": "",
            "class": "Dalek",
            "module": "DalekJS"
        },
        {
            "file": "lib/dalek.js",
            "line": 301,
            "description": "Sets up the event dispatcher for driver events",
            "itemtype": "method",
            "name": "_setupDriverEmitter",
            "chainable": 1,
            "access": "private",
            "tagname": "",
            "class": "Dalek",
            "module": "DalekJS"
        },
        {
            "file": "lib/dalek.js",
            "line": 316,
            "description": "Make sure to shutdown dalek & its spawned\ncomponents, webservers gracefully if a\nruntime error pops up",
            "itemtype": "method",
            "name": "_registerExceptionHandler",
            "access": "private",
            "tagname": "",
            "chainable": 1,
            "class": "Dalek",
            "module": "DalekJS"
        },
        {
            "file": "lib/dalek.js",
            "line": 332,
            "description": "Shutdown on uncaught exception",
            "itemtype": "method",
            "name": "_shutdown",
            "params": [
                {
                    "name": "exception",
                    "description": "Runtime exception",
                    "type": "Object"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Dalek",
            "module": "DalekJS"
        }
    ],
    "warnings": [
        {
            "message": "unknown tag: part",
            "line": " lib/dalek/actions.js:34"
        },
        {
            "message": "unknown tag: api",
            "line": " lib/dalek/actions.js:34"
        },
        {
            "message": "unknown tag: api",
            "line": " lib/dalek/actions.js:48"
        },
        {
            "message": "unknown tag: api",
            "line": " lib/dalek/actions.js:94"
        },
        {
            "message": "unknown tag: api",
            "line": " lib/dalek/actions.js:180"
        },
        {
            "message": "unknown tag: api",
            "line": " lib/dalek/actions.js:225"
        },
        {
            "message": "unknown tag: api",
            "line": " lib/dalek/actions.js:259"
        },
        {
            "message": "unknown tag: api",
            "line": " lib/dalek/actions.js:299"
        },
        {
            "message": "unknown tag: api",
            "line": " lib/dalek/actions.js:417"
        },
        {
            "message": "unknown tag: api",
            "line": " lib/dalek/actions.js:524"
        },
        {
            "message": "unknown tag: api",
            "line": " lib/dalek/actions.js:564"
        },
        {
            "message": "unknown tag: api",
            "line": " lib/dalek/actions.js:587"
        },
        {
            "message": "unknown tag: api",
            "line": " lib/dalek/actions.js:615"
        },
        {
            "message": "unknown tag: api",
            "line": " lib/dalek/actions.js:643"
        },
        {
            "message": "unknown tag: api",
            "line": " lib/dalek/actions.js:689"
        },
        {
            "message": "unknown tag: api",
            "line": " lib/dalek/actions.js:726"
        },
        {
            "message": "unknown tag: api",
            "line": " lib/dalek/actions.js:757"
        },
        {
            "message": "unknown tag: api",
            "line": " lib/dalek/actions.js:809"
        },
        {
            "message": "unknown tag: api",
            "line": " lib/dalek/actions.js:844"
        },
        {
            "message": "unknown tag: api",
            "line": " lib/dalek/actions.js:878"
        },
        {
            "message": "unknown tag: api",
            "line": " lib/dalek/actions.js:917"
        },
        {
            "message": "unknown tag: api",
            "line": " lib/dalek/actions.js:960"
        },
        {
            "message": "unknown tag: api",
            "line": " lib/dalek/actions.js:993"
        },
        {
            "message": "unknown tag: api",
            "line": " lib/dalek/actions.js:1027"
        },
        {
            "message": "unknown tag: media",
            "line": " lib/dalek/actions.js:1073"
        },
        {
            "message": "unknown tag: api",
            "line": " lib/dalek/actions.js:1073"
        },
        {
            "message": "unknown tag: api",
            "line": " lib/dalek/actions.js:1117"
        },
        {
            "message": "unknown tag: api",
            "line": " lib/dalek/actions.js:1141"
        },
        {
            "message": "unknown tag: api",
            "line": " lib/dalek/actions.js:1180"
        },
        {
            "message": "unknown tag: api",
            "line": " lib/dalek/actions.js:1218"
        },
        {
            "message": "unknown tag: api",
            "line": " lib/dalek/actions.js:1266"
        },
        {
            "message": "unknown tag: api",
            "line": " lib/dalek/actions.js:1445"
        },
        {
            "message": "unknown tag: part",
            "line": " lib/dalek/assertions.js:43"
        },
        {
            "message": "unknown tag: api",
            "line": " lib/dalek/assertions.js:43"
        },
        {
            "message": "unknown tag: api",
            "line": " lib/dalek/assertions.js:61"
        },
        {
            "message": "unknown tag: api",
            "line": " lib/dalek/assertions.js:116"
        },
        {
            "message": "unknown tag: api",
            "line": " lib/dalek/assertions.js:164"
        },
        {
            "message": "unknown tag: api",
            "line": " lib/dalek/assertions.js:253"
        },
        {
            "message": "unknown tag: api",
            "line": " lib/dalek/assertions.js:346"
        },
        {
            "message": "unknown tag: api",
            "line": " lib/dalek/assertions.js:410"
        },
        {
            "message": "unknown tag: api",
            "line": " lib/dalek/assertions.js:501"
        },
        {
            "message": "unknown tag: api",
            "line": " lib/dalek/assertions.js:545"
        },
        {
            "message": "unknown tag: api",
            "line": " lib/dalek/assertions.js:589"
        },
        {
            "message": "unknown tag: api",
            "line": " lib/dalek/assertions.js:640"
        },
        {
            "message": "unknown tag: api",
            "line": " lib/dalek/assertions.js:692"
        },
        {
            "message": "unknown tag: api",
            "line": " lib/dalek/assertions.js:726"
        },
        {
            "message": "unknown tag: api",
            "line": " lib/dalek/assertions.js:760"
        },
        {
            "message": "unknown tag: api",
            "line": " lib/dalek/assertions.js:803"
        },
        {
            "message": "unknown tag: api",
            "line": " lib/dalek/assertions.js:839"
        },
        {
            "message": "unknown tag: api",
            "line": " lib/dalek/assertions.js:876"
        },
        {
            "message": "unknown tag: api",
            "line": " lib/dalek/assertions.js:916"
        },
        {
            "message": "unknown tag: api",
            "line": " lib/dalek/assertions.js:954"
        },
        {
            "message": "unknown tag: api",
            "line": " lib/dalek/assertions.js:993"
        },
        {
            "message": "unknown tag: api",
            "line": " lib/dalek/assertions.js:1026"
        },
        {
            "message": "unknown tag: api",
            "line": " lib/dalek/assertions.js:1088"
        },
        {
            "message": "unknown tag: api",
            "line": " lib/dalek/assertions.js:1137"
        },
        {
            "message": "unknown tag: api",
            "line": " lib/dalek/assertions.js:1184"
        },
        {
            "message": "unknown tag: api",
            "line": " lib/dalek/assertions.js:1207"
        },
        {
            "message": "unknown tag: api",
            "line": " lib/dalek/assertions.js:1246"
        },
        {
            "message": "unknown tag: api",
            "line": " lib/dalek/assertions.js:1302"
        },
        {
            "message": "unknown tag: api",
            "line": " lib/dalek/assertions.js:1333"
        },
        {
            "message": "unknown tag: part",
            "line": " lib/dalek/config.js:52"
        },
        {
            "message": "unknown tag: api",
            "line": " lib/dalek/config.js:52"
        },
        {
            "message": "unknown tag: priavte",
            "line": " lib/dalek/config.js:371"
        },
        {
            "message": "unknown tag: part",
            "line": " lib/dalek/driver.js:54"
        },
        {
            "message": "unknown tag: api",
            "line": " lib/dalek/driver.js:54"
        },
        {
            "message": "unknown tag: part",
            "line": " lib/dalek/host.js:45"
        },
        {
            "message": "unknown tag: api",
            "line": " lib/dalek/host.js:45"
        },
        {
            "message": "param name/type/descript missing",
            "line": " lib/dalek/host.js:493"
        },
        {
            "message": "param name/type/descript missing",
            "line": " lib/dalek/host.js:493"
        },
        {
            "message": "param name/type/descript missing",
            "line": " lib/dalek/host.js:493"
        },
        {
            "message": "unknown tag: part",
            "line": " lib/dalek/reporter.js:27"
        },
        {
            "message": "unknown tag: api",
            "line": " lib/dalek/reporter.js:27"
        },
        {
            "message": "unknown tag: part",
            "line": " lib/dalek/suite.js:47"
        },
        {
            "message": "unknown tag: api",
            "line": " lib/dalek/suite.js:47"
        },
        {
            "message": "unknown tag: part",
            "line": " lib/dalek/timer.js:39"
        },
        {
            "message": "unknown tag: api",
            "line": " lib/dalek/timer.js:39"
        },
        {
            "message": "unknown tag: part",
            "line": " lib/dalek/unit.js:68"
        },
        {
            "message": "unknown tag: api",
            "line": " lib/dalek/unit.js:68"
        },
        {
            "message": "Missing item type\nAssert result of the execution of JavaScript function within the browser context.\n  \n  test\n    .open('http://dalekjs.com/index.html')\n    .assert.evaluate(function () {\n      return document.getElementsByClassName('grid').length;\n    }).is(2, 'Count of grid on page is equal 2');\n\n* > Note: Buggy in Firefox\n*\n* @api\n* @method execute\n* @param {function} script JavaScript function that should be executed\n* @return chainable",
            "line": " lib/dalek/assertions.js:1410"
        },
        {
            "message": "Missing item type\nConfigures the config instance",
            "line": " lib/dalek/config.js:36"
        },
        {
            "message": "Missing item type\nConfigures the driver instance",
            "line": " lib/dalek/driver.js:33"
        },
        {
            "message": "Missing item type\nSets the configuration options for the \ndalek remote browser executor",
            "line": " lib/dalek/host.js:32"
        },
        {
            "message": "Missing item type\nRequest secret or false when unsecure",
            "line": " lib/dalek/remote.js:141"
        },
        {
            "message": "Missing item type\nReporters from the canary channel",
            "line": " lib/dalek/reporter.js:39"
        },
        {
            "message": "Missing item type",
            "line": " lib/dalek/suite.js:35"
        },
        {
            "message": "Missing item type\nPrepares the test instance values",
            "line": " lib/dalek/unit.js:38"
        },
        {
            "message": "Missing item type\nDefault options",
            "line": " lib/dalek.js:38"
        },
        {
            "message": "Missing item type\nSetup all the options needed to configure dalek",
            "line": " lib/dalek.js:51"
        }
    ]
}